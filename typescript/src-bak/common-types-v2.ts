/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** @enum {string} */
        CommonErrorCodes: "url_invalid" | "actionToken_internalError" | "actionToken_missing" | "actionToken_invalid" | "actionToken_unknownType" | "authentication_missing" | "authentication_internalError" | "authentication_invalid_credentials" | "authentication_userDisabled" | "authentication_base64DecodeFailed" | "authentication_methodNotSupported" | "authorization_noPermission" | "requestParameter_wrongFormat" | "requestParameter_missing" | "requestParameter_invalid" | "requestParameter_not_supported" | "requestParameter_pointless" | "requestParameter_contradicting" | "requestParameter_conflict" | "resourceData_wrongFormat" | "resourceData_missing" | "resourceData_invalid" | "resourceData_not_supported" | "resourceData_pointless" | "resourceData_contradicting" | "resourceData_conflict" | "resourceVersion_mismatch" | "mandatoryEmailSending_failed" | "requestData_wrongFormat" | "requestData_missing" | "requestData_invalid" | "requestData_not_supported" | "requestData_contradicting" | "query_limit_reached" | "field_deprecated" | "underlying_resource_unavailable";
        /**
         * @description This info piece is most useful for 400 - "Bad Request" problems but can be meaningful of course in other scenarios too. It marks the place which has the problem.
         * @enum {string|null}
         */
        ProblemPlaceEnum: "queryParam" | "urlParam" | "url" | "requestBody" | "requestHeader" | "responseBody" | "responseHeader" | "responseStatusCode" | "remoteService" | "cookie" | "persistence" | "calculated" | null;
        ProblemBaseClass: {
            /**
             * @example warning|error
             * @enum {string}
             */
            severity: "warning" | "error";
            /** @description The problem in human readable form */
            message: string;
            place?: components["schemas"]["ProblemPlaceEnum"];
            /** @description If it makes sense it tells you which place was problematic. E.g. if a request parameter should be an Integer but you send in something wrong then "placeName" will tell you exactly which request parameter was wrong. */
            placeName?: string | null;
            /** @default [] */
            errorCodes: components["schemas"]["CommonErrorCodes"][] | null;
        };
        BaseResponseClass: {
            /**
             * Format: int32
             * @description The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
             * @example 1543355710
             */
            requestReceivedAt: number;
            /**
             * Format: int32
             * @description Number of milliseconds the processing took on server side
             */
            processingTookMillis?: number | null;
            /**
             * @description List of errors/warnings
             * @default []
             */
            problems: components["schemas"]["ProblemBaseClass"][] | null;
            /** @description Extra data (variables) the endpoint wants to return for programmatic processing. */
            vars?: {
                [key: string]: unknown;
            } | null;
        };
        MessageResponseClass: components["schemas"]["BaseResponseClass"] & {
            /** @description The human readable message */
            message?: string;
        };
        ResponseContainerInfoClass: {
            /**
             * @description The ID of the container - this is typically a UUID like value
             * @example d72c640b-d963-4789-bd48-9a38f381eaa6
             */
            id: string;
            /**
             * @description The name of the container
             * @example My Website
             */
            name?: string;
        } | null;
        ContainerResponseClass: components["schemas"]["BaseResponseClass"] & {
            container: components["schemas"]["ResponseContainerInfoClass"];
        };
        ContainerQueryRangeResponseClass: components["schemas"]["ContainerResponseClass"] & {
            /**
             * Format: int32
             * @description In the request you requested data starting by this UNIX timestamp in UTC (seconds since Epoch)
             * @example 1543355608
             */
            requestedFromTimestamp: number;
            /**
             * Format: int32
             * @description In the request you requested data until this UNIX timestamp in UTC (seconds since Epoch)
             * @example 1543355708
             */
            requestedToTimestamp: number;
            /**
             * Format: int32
             * @description This response contains data starting by this UNIX timestamp in UTC (seconds since Epoch) - will be always rounded to at least minutes or even more (see section "Interval of your interest" above!)
             * @example 1543355608
             */
            dataFromTimestamp: number;
            /**
             * Format: int32
             * @description This response contains data until this UNIX timestamp in UTC (seconds since Epoch)
             * @example 1543355708
             */
            dataToTimestamp: number;
        };
    };
    responses: never;
    parameters: {
        /** @description ID of the container to query stat from */
        containerId: string;
        /**
         * @description Defines the beginning of the query range - you are interested in data which time is >= than this timestamp.
         *
         *     Format is mixed. It can be
         *      * a UNIX timestamp in UTC (seconds since Epoch) e.g.: `1657261221` - means 2022-07-08 6:20:21 GMT
         *        (note: server and client clock might be different! see: /v2/system/clock endpoint to query server time)
         *      * a relative time spec compared to current time in form of 'now[-X<m|h|d>]' where 'm' means minutes, 'h' means hours and 'd' means days,
         *        e.g.: `now-10m` means 10 minutes earlier compared to current time,
         *        `now-2h` means 2 hours earlier and so on
         *
         *     This must point to the past!   (note: server validates according to his own clock!)
         *
         * @example now-1h
         */
        fromTimestamp: string;
        /** @description Defines the end of the query range - you are interested in data which time is <= than this timestamp.
         *
         *     **Default value:** the current timestamp, so 'now' if you do not specify this parameter.
         *
         *     Format is mixed. It can be
         *      * a UNIX timestamp in UTC (seconds since Epoch) e.g.: `1657261221` - means 2022-07-08 6:20:21 GMT
         *        (note: server and client clock might be different! see: /v2/system/clock endpoint to query server time)
         *      * a relative time spec compared to current time in form of 'now[-X<m|h|d>]' where 'm' means minutes, 'h' means hours and 'd' means days,
         *        e.g.: `now-10m` means 10 minutes earlier compared to current time,
         *        `now-2h` means 2 hours earlier and so on
         *
         *     Can not point to the future!   (note: server validates according to his own clock!)
         *      */
        toTimestamp: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type CommonErrorCodes = components['schemas']['CommonErrorCodes'];
export type ProblemPlaceEnum = components['schemas']['ProblemPlaceEnum'];
export type ProblemBaseClass = components['schemas']['ProblemBaseClass'];
export type BaseResponseClass = components['schemas']['BaseResponseClass'];
export type MessageResponseClass = components['schemas']['MessageResponseClass'];
export type ResponseContainerInfoClass = components['schemas']['ResponseContainerInfoClass'];
export type ContainerResponseClass = components['schemas']['ContainerResponseClass'];
export type ContainerQueryRangeResponseClass = components['schemas']['ContainerQueryRangeResponseClass'];
export type ParameterContainerId = components['parameters']['containerId'];
export type ParameterFromTimestamp = components['parameters']['fromTimestamp'];
export type ParameterToTimestamp = components['parameters']['toTimestamp'];
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
