/**
 * Common object definitions - regarding scheduled actions.
 * These object definitions are shared among multiple contracts. Suitable to describe anything which runs on a scheduled basis - in a very intuitive, human-friendly way. (Unlike chrontab format... :-P)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { DailyScheduleSetup } from './dailyScheduleSetup';
import { HourlyScheduleSetup } from './hourlyScheduleSetup';
import { MonthlyScheduleSetup } from './monthlyScheduleSetup';
import { MonthlyScheduleSetupDayName } from './monthlyScheduleSetupDayName';
import { ScheduleDayName } from './scheduleDayName';
import { WeeklyScheduleSetup } from './weeklyScheduleSetup';

export class ScheduleSetup {
    /**
    * Mandatory element. This is an \"HH:MM\" formatted time descriptor. Means: within a day what time should we trigger the execution first? From this time the action is shcheduled every hour.      For example if you set it to \"09:15\" then first execution happens at 09:15, the next one at 10:15 then 11:15 and so on. 
    */
    'firstTime': string;
    /**
    * Optional setting. This is an \"HH:MM\" formatted time descriptor. Means: within a day triggering will happen only if the current time is <= than this time.      For example, if `firstTime=\"09:15\"` then actually the last execution of the action will happen at \"17:15\".      In case not given then scheduling will happen within the day every hour starting from `firstTime`. 
    */
    'untilTime'?: string;
    /**
    * Optional setting. If given then scheduling will happen only on these days. This is a day mask basically.
    */
    'dayNames'?: Array<ScheduleDayName>;
    /**
    * Mandatory element. This is an \"HH:MM\" formatted time descriptor. Means: within a day what time should we trigger the execution? 
    */
    'triggerTime': string;
    'dayName'?: MonthlyScheduleSetupDayName;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "firstTime",
            "baseName": "firstTime",
            "type": "string"
        },
        {
            "name": "untilTime",
            "baseName": "untilTime",
            "type": "string"
        },
        {
            "name": "dayNames",
            "baseName": "dayNames",
            "type": "Array<ScheduleDayName>"
        },
        {
            "name": "triggerTime",
            "baseName": "triggerTime",
            "type": "string"
        },
        {
            "name": "dayName",
            "baseName": "dayName",
            "type": "MonthlyScheduleSetupDayName"
        }    ];

    static getAttributeTypeMap() {
        return ScheduleSetup.attributeTypeMap;
    }
}

