/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Common object definitions
 * These object definitions are shared among multiple contracts
 * OpenAPI spec version: 3.0
 */
export type CommonErrorCodes = typeof CommonErrorCodes[keyof typeof CommonErrorCodes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommonErrorCodes = {
  url_invalid: 'url_invalid',
  actionToken_internalError: 'actionToken_internalError',
  actionToken_missing: 'actionToken_missing',
  actionToken_invalid: 'actionToken_invalid',
  actionToken_unknownType: 'actionToken_unknownType',
  authentication_missing: 'authentication_missing',
  authentication_internalError: 'authentication_internalError',
  authentication_invalid_credentials: 'authentication_invalid_credentials',
  authentication_userDisabled: 'authentication_userDisabled',
  authentication_base64DecodeFailed: 'authentication_base64DecodeFailed',
  authentication_methodNotSupported: 'authentication_methodNotSupported',
  authorization_noPermission: 'authorization_noPermission',
  requestParameter_wrongFormat: 'requestParameter_wrongFormat',
  requestParameter_missing: 'requestParameter_missing',
  requestParameter_invalid: 'requestParameter_invalid',
  requestParameter_not_supported: 'requestParameter_not_supported',
  requestParameter_pointless: 'requestParameter_pointless',
  requestParameter_contradicting: 'requestParameter_contradicting',
  requestParameter_conflict: 'requestParameter_conflict',
  resourceData_wrongFormat: 'resourceData_wrongFormat',
  resourceData_missing: 'resourceData_missing',
  resourceData_invalid: 'resourceData_invalid',
  resourceData_not_supported: 'resourceData_not_supported',
  resourceData_pointless: 'resourceData_pointless',
  resourceData_contradicting: 'resourceData_contradicting',
  resourceData_conflict: 'resourceData_conflict',
  resourceVersion_mismatch: 'resourceVersion_mismatch',
  mandatoryEmailSending_failed: 'mandatoryEmailSending_failed',
  requestData_wrongFormat: 'requestData_wrongFormat',
  requestData_missing: 'requestData_missing',
  requestData_invalid: 'requestData_invalid',
  requestData_not_supported: 'requestData_not_supported',
  requestData_contradicting: 'requestData_contradicting',
  query_limit_reached: 'query_limit_reached',
  field_deprecated: 'field_deprecated',
  underlying_resource_unavailable: 'underlying_resource_unavailable',
} as const;

/**
 * This info piece is most useful for 400 - "Bad Request" problems but can be meaningful of course in other scenarios too. It marks the place which has the problem.
 * @nullable
 */
export type ProblemPlaceEnum = typeof ProblemPlaceEnum[keyof typeof ProblemPlaceEnum] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProblemPlaceEnum = {
  queryParam: 'queryParam',
  urlParam: 'urlParam',
  url: 'url',
  requestBody: 'requestBody',
  requestHeader: 'requestHeader',
  responseBody: 'responseBody',
  responseHeader: 'responseHeader',
  responseStatusCode: 'responseStatusCode',
  remoteService: 'remoteService',
  cookie: 'cookie',
  persistence: 'persistence',
  calculated: 'calculated',
} as const;

export type ProblemClassSeverity = typeof ProblemClassSeverity[keyof typeof ProblemClassSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProblemClassSeverity = {
  warning: 'warning',
  error: 'error',
} as const;

export interface ProblemClass {
  severity: ProblemClassSeverity;
  /** The problem in human readable form */
  message: string;
  place?: ProblemPlaceEnum;
  /**
   * If it makes sense it tells you which place was problematic. E.g. if a request parameter should be an Integer but you send in something wrong then "placeName" will tell you exactly which request parameter was wrong.
   * @nullable
   */
  placeName?: string | null;
  /** @nullable */
  errorCodes?: string[] | null;
}

/**
 * Extra data (variables) the endpoint wants to return for programmatic processing.
 * @nullable
 */
export type BaseResponseClassVars = { [key: string]: unknown } | null;

export interface BaseResponseClass {
  /** The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started */
  requestReceivedAt: number;
  /**
   * Number of milliseconds the processing took on server side
   * @nullable
   */
  processingTookMillis?: number | null;
  /**
   * List of errors/warnings
   * @nullable
   */
  problems?: ProblemClass[] | null;
  /**
   * Extra data (variables) the endpoint wants to return for programmatic processing.
   * @nullable
   */
  vars?: BaseResponseClassVars;
}

export type MessageResponseClassAllOf = {
  /** The human readable message */
  message?: string;
};

export type MessageResponseClass = BaseResponseClass & MessageResponseClassAllOf;

/**
 * @nullable
 */
export type ResponseContainerInfoClass = {
  /** The ID of the container - this is typically a UUID like value */
  id: string;
  /** The name of the container */
  name?: string;
} | null;

export type ContainerResponseClassAllOf = {
  container: ResponseContainerInfoClass;
};

export type ContainerResponseClass = BaseResponseClass & ContainerResponseClassAllOf;

export type ContainerQueryRangeResponseClassAllOf = {
  /** In the request you requested data starting by this UNIX timestamp in UTC (seconds since Epoch) */
  requestedFromTimestamp: number;
  /** In the request you requested data until this UNIX timestamp in UTC (seconds since Epoch) */
  requestedToTimestamp: number;
  /** This response contains data starting by this UNIX timestamp in UTC (seconds since Epoch) - will be always rounded to at least minutes or even more (see section "Interval of your interest" above!) */
  dataFromTimestamp: number;
  /** This response contains data until this UNIX timestamp in UTC (seconds since Epoch) */
  dataToTimestamp: number;
};

export type ContainerQueryRangeResponseClass = ContainerResponseClass & ContainerQueryRangeResponseClassAllOf;

/**
 * Defines the beginning of the query range - you are interested in data which time is >= than this timestamp.  
  
Format is mixed. It can be
 * a UNIX timestamp in UTC (seconds since Epoch) e.g.: `1657261221` - means 2022-07-08 6:20:21 GMT  
   (note: server and client clock might be different! see: /v2/system/clock endpoint to query server time)
 * a relative time spec compared to current time in form of 'now[-X<m|h|d>]' where 'm' means minutes, 'h' means hours and 'd' means days,
   e.g.: `now-10m` means 10 minutes earlier compared to current time,
   `now-2h` means 2 hours earlier and so on
   
This must point to the past!   (note: server validates according to his own clock!)

 */
export type FromTimestampParameter = string;

/**
 * Defines the end of the query range - you are interested in data which time is <= than this timestamp.
  
**Default value:** the current timestamp, so 'now' if you do not specify this parameter.
  
Format is mixed. It can be
 * a UNIX timestamp in UTC (seconds since Epoch) e.g.: `1657261221` - means 2022-07-08 6:20:21 GMT  
   (note: server and client clock might be different! see: /v2/system/clock endpoint to query server time)
 * a relative time spec compared to current time in form of 'now[-X<m|h|d>]' where 'm' means minutes, 'h' means hours and 'd' means days,
   e.g.: `now-10m` means 10 minutes earlier compared to current time,
   `now-2h` means 2 hours earlier and so on
   
Can not point to the future!   (note: server validates according to his own clock!)

 */
export type ToTimestampParameter = string;


