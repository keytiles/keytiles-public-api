/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Common object definitions
 * These object definitions are shared among multiple contracts
 * OpenAPI spec version: 1.0
 */
/**
 * Textual description of the status
 */
export type MessageResponseClassStatus = typeof MessageResponseClassStatus[keyof typeof MessageResponseClassStatus];
export declare const MessageResponseClassStatus: {
    readonly ok: "ok";
    readonly failed: "failed";
    readonly warning: "warning";
};
export interface MessageResponseClass {
    /** Textual description of the status */
    status?: MessageResponseClassStatus;
    /** Human readable error/success/result message */
    message?: string;
}
export interface BaseResponseClass {
    /** The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started */
    requestReceivedAt?: number;
    /** Number of milliseconds the processing took on server side */
    processingTookMillis?: number;
    /** List of human readable messages might help you understand better why you not got back what you requested (e.g. if returned a different interval) and fine tune your queries */
    messages?: string[];
}
/**
 * Possible values for type of tiles
 */
export type TileTypeEnum = typeof TileTypeEnum[keyof typeof TileTypeEnum];
export declare const TileTypeEnum: {
    readonly frontpage: "frontpage";
    readonly page: "page";
    readonly article: "article";
};
export interface ResponseContainerInfoClass {
    /** The ID of the container - this is typically a UUID like value */
    id?: string;
    /** The name of the container */
    name?: string;
}
export type IntervalBasedResponseClassAllOf = {
    container?: ResponseContainerInfoClass;
    /** In the request you requested data starting by this UNIX timestamp in UTC (seconds since Epoch) */
    requestedFromTimestamp?: number;
    /** In the request you requested data until this UNIX timestamp in UTC (seconds since Epoch) */
    requestedToTimestamp?: number;
    /** This response contains data starting by this UNIX timestamp in UTC (seconds since Epoch) - will be always rounded to at least minutes or even more (see section "Interval of your interest" above!) */
    dataFromTimestamp?: number;
    /** This response contains data until this UNIX timestamp in UTC (seconds since Epoch) */
    dataToTimestamp?: number;
};
export type IntervalBasedResponseClass = BaseResponseClass & IntervalBasedResponseClassAllOf;
export interface IntervalClass {
    /** Basically the index of the interval - within the returned data interval */
    id?: number;
    /** Beginning of interval in seconds relative to the returned global data time-frame. If you want to know absolute timestamp then add this to /dataFromTimestamp attribute value */
    starts?: number;
    /** Length of this interval in seconds */
    length?: number;
}
export type IntervalBasedResponseWithResolutionClassAllOf = {
    /** The data returned has a break down into these intervals. Please read generic "Requesting a break down of stats within the interval" section above to understand it better! */
    resolutionIntervals?: IntervalClass[];
};
export type IntervalBasedResponseWithResolutionClass = IntervalBasedResponseClass & IntervalBasedResponseWithResolutionClassAllOf;
