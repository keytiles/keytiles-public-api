/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Common object definitions - regarding scheduled actions.
 * These object definitions are shared among multiple contracts. Suitable to describe anything which runs on a scheduled basis - in a very intuitive, human-friendly way. (Unlike chrontab format... :-P)
 * OpenAPI spec version: 1.0
 */
/**
 * Name of the days we use in day masks.
 */
export type ScheduleDayName = typeof ScheduleDayName[keyof typeof ScheduleDayName];
export declare const ScheduleDayName: {
    readonly Mon: "Mon";
    readonly Tue: "Tue";
    readonly Wed: "Wed";
    readonly Thu: "Thu";
    readonly Fri: "Fri";
    readonly Sat: "Sat";
    readonly Sun: "Sun";
};
/**
 * Describes which type of schedule is this?
 */
export type ScheduleType = typeof ScheduleType[keyof typeof ScheduleType];
export declare const ScheduleType: {
    readonly hourly: "hourly";
    readonly daily: "daily";
    readonly weekly: "weekly";
    readonly monthly: "monthly";
};
export type ScheduleSetup = HourlyScheduleSetup | DailyScheduleSetup | WeeklyScheduleSetup | MonthlyScheduleSetup;
/**
 * Describes a Schedule of something. As of now you have basically 4 types: hourly, daily, weekly and Monthly schedules.
 * @nullable
 */
export type Schedule = {
    /** Describes which type of schedule is this? */
    type: ScheduleType;
    setup: ScheduleSetup;
    /** Encodes the time zone offset from UTC - all things like time and even the days(!) are given using this offset */
    tzOffset: number;
    /** The major version of the Schedule schema which was used when this object was created. This helps to evolve Schedules over time. */
    majorVersion: number;
} | null;
/**
 * Encodes scheduling tailored for hourly execution.
 */
export interface HourlyScheduleSetup {
    /**
     * Mandatory element. This is an "HH:MM" formatted time descriptor. Means: within a day what time should we trigger the execution first? From this time the action is shcheduled every hour.
    
  For example if you set it to "09:15" then first execution happens at 09:15, the next one at 10:15 then 11:15 and so on.
  
     */
    firstTime: string;
    /** Optional setting. This is an "HH:MM" formatted time descriptor. Means: within a day triggering will happen only if the current time is <= than this time.
    
  For example, if `firstTime="09:15"` then actually the last execution of the action will happen at "17:15".
    
  In case not given then scheduling will happen within the day every hour starting from `firstTime`.
   */
    untilTime?: string;
    /** Optional setting. If given then scheduling will happen only on these days. This is a day mask basically. */
    dayNames?: ScheduleDayName[];
}
/**
 * Encodes scheduling tailored for daily execution.
 */
export interface DailyScheduleSetup {
    /**
     * Mandatory element. This is an "HH:MM" formatted time descriptor. Means: within a day what time should we trigger the execution?
  
     */
    triggerTime: string;
    /** Optional setting. If given then scheduling will happen only on these days. This is a day mask basically. */
    dayNames?: ScheduleDayName[];
}
/**
 * Encodes scheduling tailored for weekly execution.
 */
export interface WeeklyScheduleSetup {
    /**
     * Mandatory element. This is an "HH:MM" formatted time descriptor. Means: within a day what time should we trigger the execution?
  
     */
    triggerTime: string;
    dayName?: ScheduleDayName;
}
export declare const MonthlyScheduleSetupDayName: {
    readonly firstDay: "firstDay";
    readonly lastDay: "lastDay";
    readonly Mon: "Mon";
    readonly Tue: "Tue";
    readonly Wed: "Wed";
    readonly Thu: "Thu";
    readonly Fri: "Fri";
    readonly Sat: "Sat";
    readonly Sun: "Sun";
};
/**
 * Encodes scheduling tailored for monthly execution.
 */
export interface MonthlyScheduleSetup {
    /**
     * Mandatory element. This is an "HH:MM" formatted time descriptor. Means: within a day what time should we trigger the execution?
  
     */
    triggerTime: string;
    /** Optional element. To pick up the day when the report is triggered you have a few options. If not given then simply it will be 'firstDay'. */
    dayName?: typeof MonthlyScheduleSetupDayName[keyof typeof MonthlyScheduleSetupDayName];
}
