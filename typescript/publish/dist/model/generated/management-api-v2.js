/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Keytiles Management API
 * API to manage users, permissions, containers, etc.
 * OpenAPI spec version: 2.0
 */
import axios from 'axios';
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ManagementEndpointLocalErrorCodes = {
    containerId_missing: 'containerId_missing',
    containerId_invalid: 'containerId_invalid',
    containerData_missing: 'containerData_missing',
    containerData_invalid: 'containerData_invalid',
    containerData_jsonDecodeFailed: 'containerData_jsonDecodeFailed',
    containerData_admin_missing: 'containerData_admin_missing',
    containerData_finance_missing: 'containerData_finance_missing',
    userIdTerm_missing: 'userIdTerm_missing',
    userIdTerm_invalid: 'userIdTerm_invalid',
    userData_missing: 'userData_missing',
    userData_invalid: 'userData_invalid',
    userData_jsonDecodeFailed: 'userData_jsonDecodeFailed',
    passwordData_missing: 'passwordData_missing',
    passwordData_invalid: 'passwordData_invalid',
    userData_nickname_invalid: 'userData_nickname_invalid',
    userData_email_invalid: 'userData_email_invalid',
    userData_email_alreadyTaken: 'userData_email_alreadyTaken',
    readonlyField_changed: 'readonlyField_changed',
    protectedField_changed: 'protectedField_changed',
    requiredField_missing: 'requiredField_missing',
    key_missing: 'key_missing',
    key_invalid: 'key_invalid',
    keyValueData_invalid: 'keyValueData_invalid',
    queryRange_corrected: 'queryRange_corrected',
    queryRange_from_corrected: 'queryRange_from_corrected',
    queryRange_to_corrected: 'queryRange_to_corrected',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserContainerRoleClass = {
    view: 'view',
    admin: 'admin',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserContainerRoleClassV2 = {
    view: 'view',
    admin: 'admin',
    finance: 'finance',
    developer: 'developer',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HitFaultType = {
    error: 'error',
    warn: 'warn',
    unknown: 'unknown',
};
/**
 * This endpoint can be used without authentication too to start a registration process. (Authentication can be added to authenticate as Keytiles Administrator who has more priviliges)
  
By sending in a pre-filled partial User resource you initiate the registration process. To complete the registration flow a Token will be generated and sent to the given e-mail address. Flow can be completed by executing that Token - see '/v1/management/tokens/actions/{tokenId}/execute' endpoint!

 * @summary Create a new user (registration)
 */
export const postV1ManagementUsersRest = (userCreationClass, options) => {
    return axios.post(`/v1/management/users/rest`, userCreationClass, options);
};
/**
 * Please note! However if a User account is disabled (isEnabled=false) the user can still query himself. This is required because he could not even realize his account is in a disabled state...

 * @summary Query a specific user with one of its IDs
 */
export const getV1ManagementUsersRestUserIdTerm = (userIdTerm, options) => {
    return axios.get(`/v1/management/users/rest/${userIdTerm}`, options);
};
/**
 * Only the User himself or a Keytiles administrator can trigger this request!
  
Some fields can be modified only by Keytiles administrators. (See field descriptions for more details!) If you try to modify a field like that it might result in a 403 response!

 * @summary Update the user data
 */
export const putV1ManagementUsersRestUserIdTerm = (userIdTerm, userClass, options) => {
    return axios.put(`/v1/management/users/rest/${userIdTerm}`, userClass, options);
};
/**
 * **Important!** This action can not be undone!
  
Only the User himself or a Keytiles administrator can trigger this request!
  
Please note! However if a User account is disabled (isEnabled=false) the user can still unregister. So this call will also work for disabled users if he wants to remove himself.

 * @summary Remove the given User from the system
 */
export const deleteV1ManagementUsersRestUserIdTerm = (userIdTerm, options) => {
    return axios.delete(`/v1/management/users/rest/${userIdTerm}`, options);
};
/**
 * Password is - however due to its nature is a secret - subresource of the User object. With this call you can set a new value.
  
Please note: To successfully authenticate you can either send user credentials (when you do know the current password you just want to change it) OR a one-time usable token you previously got via initiating the password reset action.

 * @summary Change the password of the user
 */
export const putV1ManagementUsersRestUserIdTermPassword = (userIdTerm, putV1ManagementUsersRestUserIdTermPasswordBody, options) => {
    return axios.put(`/v1/management/users/rest/${userIdTerm}/password`, putV1ManagementUsersRestUserIdTermPasswordBody, options);
};
/**
 * To initiate password reset procedure you just send a GET call on this endpoint. The system will generate a one-time usable token for you which is sent to the e-mail address of the user. Using this token you can one-time authenticate for using the password change endpoint (see in the REST API part!)
  
If you invoke this method again will generate a new one-time token and will invalidate the previously generated one!
  
Please note: Invoking this action does not require any credentials (no auth is needed)

 * @summary Triggers password reset procedure
 */
export const getV1ManagementUsersActionsUserIdTermPasswordReset = (userIdTerm, options) => {
    return axios.get(`/v1/management/users/actions/${userIdTerm}/password/reset`, options);
};
/**
 * If you build a login functionality anywhere you can use this action to check if the password the user entered on the UI is correct or not

 * @summary To verify if a password sent in the request body matches with the User's password or not
 */
export const postV1ManagementUsersActionsUserIdTermPasswordCheck = (userIdTerm, postV1ManagementUsersActionsUserIdTermPasswordCheckBody, options) => {
    return axios.post(`/v1/management/users/actions/${userIdTerm}/password/check`, postV1ManagementUsersActionsUserIdTermPasswordCheckBody, options);
};
/**
 * Please note: Invoking this action does not require any credentials (no auth is needed)

 * @summary Triggers execution of the action identified by the given Token
 */
export const getV1ManagementTokensActionsTokenIdExecute = (tokenId, options) => {
    return axios.get(`/v1/management/tokens/actions/${tokenId}/execute`, options);
};
/**
 * If executed without the 'containerIds' query param then returns all Containers in a list the user has at least 'view' permission.
  
You can limit the request to only a specific set of Containers by using the 'containerIds' query param.

 * @summary To query multiple Containers at once.
 */
export const getV1ManagementContainersRest = (params, options) => {
    return axios.get(`/v1/management/containers/rest`, Object.assign(Object.assign({}, options), { params: Object.assign(Object.assign({}, params), options === null || options === void 0 ? void 0 : options.params) }));
};
/**
 * Any registered User can initiate creating a Container.
  
If the user is Keytiles Admin then the Container is immediatelly created and usable. If the user is a normal user then extra validation step (via Token mechanism) is required to really create the Container

 * @summary To create a Container resource in order to establish tracking in Keytiles
 */
export const postV1ManagementContainersRest = (containerCreationClass, options) => {
    return axios.post(`/v1/management/containers/rest`, containerCreationClass, options);
};
/**
 * Only a user with effective "admin" role (over the Container) or a Keytiles Admin can execute this request.
 * @summary Query a Container resource
 */
export const getV1ManagementContainersRestContainerId = (containerId, params, options) => {
    return axios.get(`/v1/management/containers/rest/${containerId}`, Object.assign(Object.assign({}, options), { params: Object.assign(Object.assign({}, params), options === null || options === void 0 ? void 0 : options.params) }));
};
/**
 * Only Keytiles Admins or users with active "admin" role of the Container is allowed to execute this request

 * @summary To update a Container
 */
export const putV1ManagementContainersRestContainerId = (containerId, containerClass, options) => {
    return axios.put(`/v1/management/containers/rest/${containerId}`, containerClass, options);
};
/**
 * **Important!** This action can not be undone!
  
The removal will also delete all tracking data associated with the Container!
  
Only a user with effective "admin" role (over the Container) or a Keytiles Admin can execute this request.

 * @summary Remove the given Container from the system
 */
export const deleteV1ManagementContainersRestContainerId = (containerId, options) => {
    return axios.delete(`/v1/management/containers/rest/${containerId}`, options);
};
/**
 * You can query Faults Keytiles have seen during processing incoming Hits.
  
Please note:
 * Faults returned are not ordered by timestamp! They might come in random order so you might need to sort on Client side!
 * Only a user with effective "admin" or "developer" role (over the Container) can execute this request.

 * @summary Query Container hit collection faults
 */
export const getV1ManagementContainersReportsContainerIdHitfault = (containerId, params, options) => {
    return axios.get(`/v1/management/containers/reports/${containerId}/hitfault`, Object.assign(Object.assign({}, options), { params: Object.assign(Object.assign({}, params), options === null || options === void 0 ? void 0 : options.params) }));
};
/**
 * Returns the current Keytiles server side configuration which is used to classify traffic sources (aka Referrers)
   
More info: [https://www.keytiles.com/docs/how-does-referrer-grouping-work](https://www.keytiles.com/docs/how-does-referrer-grouping-work)

 * @summary Query Keytiles Referrer Classification config
 */
export const getV1ManagementConfigReferrerclassification = (options) => {
    return axios.get(`/v1/management/config/referrerclassification`, options);
};
//# sourceMappingURL=management-api-v2.js.map