/*
 * Common object definitions
 * These object definitions are shared among multiple contracts
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.common.types.v3;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keytiles.api.model.common.types.v3.ProblemPlaceEnumV3;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;

public class ProblemV3Class implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  /**
   * Gets or Sets severity
   *
   */
  public enum SeverityEnum {
    WARNING("warning"),
    ERROR("error");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SeverityEnum fromValue(String input) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  private SeverityEnum severity = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String message = null;


  // @Generator: field refers to 'ProblemPlaceEnumV3' which is 'nullable=true' so this is inherited into this field 
  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("place")
  public ProblemPlaceEnumV3 place = null;

  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("placeName")
  public String placeName = null;

  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("errorCodes")
  public List<String> errorCodes = new ArrayList<>();

  
  // @Generator: arg 'severity': mandatory field 
  // @Generator: arg 'message': mandatory field 
  @JsonCreator
  public ProblemV3Class(@JsonProperty("severity") SeverityEnum severity, @JsonProperty("message") String message) {
    super();
    if(severity == null) {
      throw new IllegalArgumentException("'severity' value can not be NULL");
    }
    if(message == null) {
      throw new IllegalArgumentException("'message' value can not be NULL");
    }
    this.severity = severity;
    this.message = message;
  }
  
  
 
  @JsonProperty("severity")
  public SeverityEnum getSeverity() {
    return severity;
  }  

  // @Generator: added to protect field 'severity' against null-value assignment 
  @JsonProperty("severity")
  public void setSeverity(SeverityEnum severity) {
    if(severity == null) {
      throw new IllegalArgumentException("'severity' value can not be NULL");
    }
    this.severity = severity;
  }

  @JsonProperty("message")
  public String getMessage() {
    return message;
  }  

  // @Generator: added to protect field 'message' against null-value assignment 
  @JsonProperty("message")
  public void setMessage(String message) {
    if(message == null) {
      throw new IllegalArgumentException("'message' value can not be NULL");
    }
    this.message = message;
  }



  // @Generator: builder style helper method to add values to not-readonly array field
  public ProblemV3Class addErrorCodesItem(String errorCodesItem) {
    if (this.errorCodes == null) {
 		this.errorCodes = new ArrayList<>();
    }
    this.errorCodes.add(errorCodesItem);
    return this;
  }

  // @Generator: builder style helper method to remove values from not-readonly array field
  public ProblemV3Class removeErrorCodesItem(String errorCodesItem) {
    if (this.errorCodes != null) {
    	this.errorCodes.remove(errorCodesItem);
    }
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProblemV3Class problemV3Class = (ProblemV3Class) o;
    return Objects.equals(this.severity, problemV3Class.severity) &&
        Objects.equals(this.message, problemV3Class.message) &&
        Objects.equals(this.place, problemV3Class.place) &&
        Objects.equals(this.placeName, problemV3Class.placeName) &&
        Objects.equals(this.errorCodes, problemV3Class.errorCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(severity, message, place, placeName, errorCodes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProblemV3Class {\n");
    
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    placeName: ").append(toIndentedString(placeName)).append("\n");
    sb.append("    errorCodes: ").append(toIndentedString(errorCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
