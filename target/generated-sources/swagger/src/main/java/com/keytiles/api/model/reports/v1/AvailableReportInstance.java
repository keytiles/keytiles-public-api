/*
 * Keytiles Reporting API
 * API endpoints to manage / query / use Keytiles Reporting. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.reports.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import java.io.Serializable;

public class AvailableReportInstance implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String id = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Integer createdAt = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Boolean isTestOnly = null;


  
  // @Generator: arg 'id': non-nullable and does not have default value - we must enforce a non-null initial value 
  // @Generator: arg 'createdAt': non-nullable and does not have default value - we must enforce a non-null initial value 
  // @Generator: arg 'isTestOnly': non-nullable and does not have default value - we must enforce a non-null initial value 
  @JsonCreator
  public AvailableReportInstance(@JsonProperty("id") String id, @JsonProperty("createdAt") Integer createdAt, @JsonProperty("isTestOnly") Boolean isTestOnly) {
    super();
    if(id == null) {
      throw new IllegalArgumentException("'id' value can not be NULL");
    }
    if(createdAt == null) {
      throw new IllegalArgumentException("'createdAt' value can not be NULL");
    }
    if(isTestOnly == null) {
      throw new IllegalArgumentException("'isTestOnly' value can not be NULL");
    }
    this.id = id;
    this.createdAt = createdAt;
    this.isTestOnly = isTestOnly;
  }
  
  
 
  @JsonProperty("id")
  public String getId() {
    return id;
  }  

  // @Generator: added to protect field 'id' against null-value assignment 
  @JsonProperty("id")
  public void setId(String id) {
    if(id == null) {
      throw new IllegalArgumentException("'id' value can not be NULL");
    }
    this.id = id;
  }

  @JsonProperty("createdAt")
  public Integer getCreatedAt() {
    return createdAt;
  }  

  // @Generator: added to protect field 'createdAt' against null-value assignment 
  @JsonProperty("createdAt")
  public void setCreatedAt(Integer createdAt) {
    if(createdAt == null) {
      throw new IllegalArgumentException("'createdAt' value can not be NULL");
    }
    this.createdAt = createdAt;
  }

  @JsonProperty("isTestOnly")
  public Boolean isIsTestOnly() {
    return isTestOnly;
  }  

  // @Generator: added to protect field 'isTestOnly' against null-value assignment 
  @JsonProperty("isTestOnly")
  public void setIsTestOnly(Boolean isTestOnly) {
    if(isTestOnly == null) {
      throw new IllegalArgumentException("'isTestOnly' value can not be NULL");
    }
    this.isTestOnly = isTestOnly;
  }



  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableReportInstance availableReportInstance = (AvailableReportInstance) o;
    return Objects.equals(this.id, availableReportInstance.id) &&
        Objects.equals(this.createdAt, availableReportInstance.createdAt) &&
        Objects.equals(this.isTestOnly, availableReportInstance.isTestOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, isTestOnly);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableReportInstance {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    isTestOnly: ").append(toIndentedString(isTestOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
