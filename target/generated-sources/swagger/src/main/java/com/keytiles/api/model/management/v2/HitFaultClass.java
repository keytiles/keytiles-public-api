/*
 * Keytiles Management API
 * API to manage users, permissions, containers, etc.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.management.v2;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keytiles.api.model.management.v2.HitFaultType;

import java.io.Serializable;

public class HitFaultClass implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Integer faultTimestamp = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private HitFaultType faultType = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String errorCode = null;


  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("tileId")
  public String tileId = null;

  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("faultUrl")
  public String faultUrl = null;

  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("hitProducer")
  public String hitProducer = null;

  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("errorDescription")
  public String errorDescription = null;

  
  // @Generator: arg 'faultTimestamp': mandatory field 
  // @Generator: arg 'faultType': mandatory field 
  // @Generator: arg 'errorCode': mandatory field 
  @JsonCreator
  public HitFaultClass(@JsonProperty("faultTimestamp") Integer faultTimestamp, @JsonProperty("faultType") HitFaultType faultType, @JsonProperty("errorCode") String errorCode) {
    super();
    if(faultTimestamp == null) {
      throw new IllegalArgumentException("'faultTimestamp' value can not be NULL");
    }
    if(faultType == null) {
      throw new IllegalArgumentException("'faultType' value can not be NULL");
    }
    if(errorCode == null) {
      throw new IllegalArgumentException("'errorCode' value can not be NULL");
    }
    this.faultTimestamp = faultTimestamp;
    this.faultType = faultType;
    this.errorCode = errorCode;
  }
  
  
 
  @JsonProperty("faultTimestamp")
  public Integer getFaultTimestamp() {
    return faultTimestamp;
  }  

  // @Generator: added to protect field 'faultTimestamp' against null-value assignment 
  @JsonProperty("faultTimestamp")
  public void setFaultTimestamp(Integer faultTimestamp) {
    if(faultTimestamp == null) {
      throw new IllegalArgumentException("'faultTimestamp' value can not be NULL");
    }
    this.faultTimestamp = faultTimestamp;
  }

  @JsonProperty("faultType")
  public HitFaultType getFaultType() {
    return faultType;
  }  

  // @Generator: added to protect field 'faultType' against null-value assignment 
  @JsonProperty("faultType")
  public void setFaultType(HitFaultType faultType) {
    if(faultType == null) {
      throw new IllegalArgumentException("'faultType' value can not be NULL");
    }
    this.faultType = faultType;
  }

  @JsonProperty("errorCode")
  public String getErrorCode() {
    return errorCode;
  }  

  // @Generator: added to protect field 'errorCode' against null-value assignment 
  @JsonProperty("errorCode")
  public void setErrorCode(String errorCode) {
    if(errorCode == null) {
      throw new IllegalArgumentException("'errorCode' value can not be NULL");
    }
    this.errorCode = errorCode;
  }



  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HitFaultClass hitFaultClass = (HitFaultClass) o;
    return Objects.equals(this.faultTimestamp, hitFaultClass.faultTimestamp) &&
        Objects.equals(this.faultType, hitFaultClass.faultType) &&
        Objects.equals(this.errorCode, hitFaultClass.errorCode) &&
        Objects.equals(this.tileId, hitFaultClass.tileId) &&
        Objects.equals(this.faultUrl, hitFaultClass.faultUrl) &&
        Objects.equals(this.hitProducer, hitFaultClass.hitProducer) &&
        Objects.equals(this.errorDescription, hitFaultClass.errorDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(faultTimestamp, faultType, errorCode, tileId, faultUrl, hitProducer, errorDescription);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HitFaultClass {\n");
    
    sb.append("    faultTimestamp: ").append(toIndentedString(faultTimestamp)).append("\n");
    sb.append("    faultType: ").append(toIndentedString(faultType)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    tileId: ").append(toIndentedString(tileId)).append("\n");
    sb.append("    faultUrl: ").append(toIndentedString(faultUrl)).append("\n");
    sb.append("    hitProducer: ").append(toIndentedString(hitProducer)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
