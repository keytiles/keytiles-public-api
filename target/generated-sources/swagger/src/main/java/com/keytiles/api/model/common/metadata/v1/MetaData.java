/*
 * Common object definitions - regarding Meta data of something bigger.
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.common.metadata.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keytiles.api.model.common.metadata.v1.ChangelogEntry;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;

public class MetaData implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String title = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String description = null;

  // @Generator: non-nullable property so Codegen applied a default empty array to it automatically because it is possible with this type 
  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private List<ChangelogEntry> changelog = new ArrayList<>();

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Integer majorVersion = null;


  
  // @Generator: arg 'title': mandatory field 
  // @Generator: arg 'description': non-nullable and does not have default value - we must enforce a non-null initial value 
  // @Generator: arg 'majorVersion': mandatory field 
  @JsonCreator
  public MetaData(@JsonProperty("title") String title, @JsonProperty("description") String description, @JsonProperty("majorVersion") Integer majorVersion) {
    super();
    if(title == null) {
      throw new IllegalArgumentException("'title' value can not be NULL");
    }
    if(description == null) {
      throw new IllegalArgumentException("'description' value can not be NULL");
    }
    if(majorVersion == null) {
      throw new IllegalArgumentException("'majorVersion' value can not be NULL");
    }
    this.title = title;
    this.description = description;
    this.majorVersion = majorVersion;
  }
  
  
 
  @JsonProperty("title")
  public String getTitle() {
    return title;
  }  

  // @Generator: added to protect field 'title' against null-value assignment 
  @JsonProperty("title")
  public void setTitle(String title) {
    if(title == null) {
      throw new IllegalArgumentException("'title' value can not be NULL");
    }
    this.title = title;
  }

  @JsonProperty("description")
  public String getDescription() {
    return description;
  }  

  // @Generator: added to protect field 'description' against null-value assignment 
  @JsonProperty("description")
  public void setDescription(String description) {
    if(description == null) {
      throw new IllegalArgumentException("'description' value can not be NULL");
    }
    this.description = description;
  }

  @JsonProperty("changelog")
  public List<ChangelogEntry> getChangelog() {
    return changelog;
  }  

  // @Generator: added to protect field 'changelog' against null-value assignment 
  @JsonProperty("changelog")
  public void setChangelog(List<ChangelogEntry> changelog) {
    if(changelog == null) {
      throw new IllegalArgumentException("'changelog' value can not be NULL");
    }
    this.changelog = changelog;
  }

  @JsonProperty("majorVersion")
  public Integer getMajorVersion() {
    return majorVersion;
  }  

  // @Generator: added to protect field 'majorVersion' against null-value assignment 
  @JsonProperty("majorVersion")
  public void setMajorVersion(Integer majorVersion) {
    if(majorVersion == null) {
      throw new IllegalArgumentException("'majorVersion' value can not be NULL");
    }
    this.majorVersion = majorVersion;
  }



  // @Generator: builder style helper method to add values to not-readonly array field
  public MetaData addChangelogItem(ChangelogEntry changelogItem) {
    if (this.changelog == null) {
 		this.changelog = new ArrayList<>();
    }
    this.changelog.add(changelogItem);
    return this;
  }

  // @Generator: builder style helper method to remove values from not-readonly array field
  public MetaData removeChangelogItem(ChangelogEntry changelogItem) {
    if (this.changelog != null) {
    	this.changelog.remove(changelogItem);
    }
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetaData metaData = (MetaData) o;
    return Objects.equals(this.title, metaData.title) &&
        Objects.equals(this.description, metaData.description) &&
        Objects.equals(this.changelog, metaData.changelog) &&
        Objects.equals(this.majorVersion, metaData.majorVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, changelog, majorVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetaData {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    changelog: ").append(toIndentedString(changelog)).append("\n");
    sb.append("    majorVersion: ").append(toIndentedString(majorVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
