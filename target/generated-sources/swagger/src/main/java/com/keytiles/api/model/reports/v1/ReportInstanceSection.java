/*
 * Keytiles Reporting API
 * API endpoints to manage / query / use Keytiles Reporting. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.reports.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keytiles.api.model.reports.v1.DataTable;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;

public class ReportInstanceSection implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String title = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String description = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private List<DataTable> dataTables = new ArrayList<>();


  
  @JsonCreator
  public ReportInstanceSection(@JsonProperty("title") String title, @JsonProperty("description") String description) {
    super();
    if(title == null) {
      throw new IllegalArgumentException("'title' value can not be NULL");
    }
    if(description == null) {
      throw new IllegalArgumentException("'description' value can not be NULL");
    }
    this.title = title;
    this.description = description;
  }
  
  
 
  @JsonProperty("title")
  public String getTitle() {
    return title;
  }  

  // @Generator: added to protect field 'title' against null-value assignment 
  @JsonProperty("title")
  public void setTitle(String title) {
    if(title == null) {
      throw new IllegalArgumentException("'title' value can not be NULL");
    }
    this.title = title;
  }

  @JsonProperty("description")
  public String getDescription() {
    return description;
  }  

  // @Generator: added to protect field 'description' against null-value assignment 
  @JsonProperty("description")
  public void setDescription(String description) {
    if(description == null) {
      throw new IllegalArgumentException("'description' value can not be NULL");
    }
    this.description = description;
  }

  @JsonProperty("dataTables")
  public List<DataTable> getDataTables() {
    return dataTables;
  }  

  // @Generator: added to protect field 'dataTables' against null-value assignment 
  @JsonProperty("dataTables")
  public void setDataTables(List<DataTable> dataTables) {
    if(dataTables == null) {
      throw new IllegalArgumentException("'dataTables' value can not be NULL");
    }
    this.dataTables = dataTables;
  }



  // @Generator: builder style helper method to add values to not-readonly array field
  public ReportInstanceSection addDataTablesItem(DataTable dataTablesItem) {
    if (this.dataTables == null) {
 		this.dataTables = new ArrayList<>();
    }
    this.dataTables.add(dataTablesItem);
    return this;
  }

  // @Generator: builder style helper method to remove values from not-readonly array field
  public ReportInstanceSection removeDataTablesItem(DataTable dataTablesItem) {
    if (this.dataTables != null) {
    	this.dataTables.remove(dataTablesItem);
    }
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportInstanceSection reportInstanceSection = (ReportInstanceSection) o;
    return Objects.equals(this.title, reportInstanceSection.title) &&
        Objects.equals(this.description, reportInstanceSection.description) &&
        Objects.equals(this.dataTables, reportInstanceSection.dataTables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, dataTables);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportInstanceSection {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dataTables: ").append(toIndentedString(dataTables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
