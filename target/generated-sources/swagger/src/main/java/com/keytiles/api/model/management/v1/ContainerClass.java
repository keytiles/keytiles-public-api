/*
 * Keytiles Management API
 * API to manage users, permissions, containers, etc.
 *
 * OpenAPI spec version: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.management.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keytiles.api.model.management.v1.ContainerCreationClass;
import com.keytiles.api.model.management.v1.ContainerOptionsClass;
import com.keytiles.api.model.management.v1.ContainerUserDetails;
import com.keytiles.api.model.management.v1.ContainerUserLink;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;

public class ContainerClass extends ContainerCreationClass implements Serializable{
  private static final long serialVersionUID = 1L;

  // @Generator: becomes private final - as readonly 
  private final String id;
  // @Generator: becomes private final - as readonly 
  private final Integer createdTimestamp;
  // @Generator: non-nullable property so Codegen applied a default empty array to it automatically because it is possible with this type 
  // @Generator: becomes private final - as readonly 
  private final List<ContainerUserDetails> userDetails;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Integer version = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Boolean isEnabled = null;

  // @Generator: non-nullable property so Codegen applied a default empty array to it automatically because it is possible with this type 
  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private List<ContainerUserLink> users = new ArrayList<>();


  
  // @Generator: arg 'id': private final field because it is readonly (also non-null check as not nullable) 
  // @Generator: arg 'version': mandatory field 
  // @Generator: arg 'createdTimestamp': private final field because it is readonly (also non-null check as not nullable) 
  // @Generator: arg 'isEnabled': mandatory field 
  // @Generator: arg 'userDetails': private final field because it is readonly (also non-null check as not nullable) 
  @JsonCreator
  public ContainerClass(@JsonProperty("name") String name, @JsonProperty("businessDomain") String businessDomain, @JsonProperty("options") ContainerOptionsClass options, @JsonProperty("id") String id, @JsonProperty("createdTimestamp") Integer createdTimestamp, @JsonProperty("userDetails") List<ContainerUserDetails> userDetails, @JsonProperty("version") Integer version, @JsonProperty("isEnabled") Boolean isEnabled) {
    super(name, businessDomain, options);
    if(id == null) {
      throw new IllegalArgumentException("'id' value can not be NULL");
    }
    if(version == null) {
      throw new IllegalArgumentException("'version' value can not be NULL");
    }
    if(createdTimestamp == null) {
      throw new IllegalArgumentException("'createdTimestamp' value can not be NULL");
    }
    if(isEnabled == null) {
      throw new IllegalArgumentException("'isEnabled' value can not be NULL");
    }
    if(userDetails == null) {
      throw new IllegalArgumentException("'userDetails' value can not be NULL");
    }
    this.id = id;
    this.createdTimestamp = createdTimestamp;
    this.userDetails = userDetails;
    this.version = version;
    this.isEnabled = isEnabled;
  }
  
  
  @JsonProperty("id")
  public String getId() {
    return id;
  }
  @JsonProperty("createdTimestamp")
  public Integer getCreatedTimestamp() {
    return createdTimestamp;
  }
  @JsonProperty("userDetails")
  public List<ContainerUserDetails> getUserDetails() {
    return userDetails;
  }
 
  @JsonProperty("version")
  public Integer getVersion() {
    return version;
  }  

  // @Generator: added to protect field 'version' against null-value assignment 
  @JsonProperty("version")
  public void setVersion(Integer version) {
    if(version == null) {
      throw new IllegalArgumentException("'version' value can not be NULL");
    }
    this.version = version;
  }

  @JsonProperty("isEnabled")
  public Boolean isIsEnabled() {
    return isEnabled;
  }  

  // @Generator: added to protect field 'isEnabled' against null-value assignment 
  @JsonProperty("isEnabled")
  public void setIsEnabled(Boolean isEnabled) {
    if(isEnabled == null) {
      throw new IllegalArgumentException("'isEnabled' value can not be NULL");
    }
    this.isEnabled = isEnabled;
  }

  @JsonProperty("users")
  public List<ContainerUserLink> getUsers() {
    return users;
  }  

  // @Generator: added to protect field 'users' against null-value assignment 
  @JsonProperty("users")
  public void setUsers(List<ContainerUserLink> users) {
    if(users == null) {
      throw new IllegalArgumentException("'users' value can not be NULL");
    }
    this.users = users;
  }



  // @Generator: builder style helper method to add values to not-readonly array field
  public ContainerClass addUsersItem(ContainerUserLink usersItem) {
    if (this.users == null) {
 		this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  // @Generator: builder style helper method to remove values from not-readonly array field
  public ContainerClass removeUsersItem(ContainerUserLink usersItem) {
    if (this.users != null) {
    	this.users.remove(usersItem);
    }
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerClass containerClass = (ContainerClass) o;
    return Objects.equals(this.id, containerClass.id) &&
        Objects.equals(this.version, containerClass.version) &&
        Objects.equals(this.createdTimestamp, containerClass.createdTimestamp) &&
        Objects.equals(this.isEnabled, containerClass.isEnabled) &&
        Objects.equals(this.users, containerClass.users) &&
        Objects.equals(this.userDetails, containerClass.userDetails) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, version, createdTimestamp, isEnabled, users, userDetails, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerClass {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    userDetails: ").append(toIndentedString(userDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
