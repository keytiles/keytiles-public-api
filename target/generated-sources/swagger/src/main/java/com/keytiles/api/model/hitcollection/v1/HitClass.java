/*
 * Keytiles Hit Collection API
 * API to collect hits received by the tracked website    This endpoint can be used as an integration point if you want to send in hits generated by your native iOS/Android/etc applications.      If you are planning to integrate your app traffic please visit the Keytiles website Developer area and learn more!      check [https://keytiles.com/developer-area/sending-in-traffic-from-ios-android-etc-apps](https://keytiles.com/developer-area/sending-in-traffic-from-ios-android-etc-apps) 
 *
 * OpenAPI spec version: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.hitcollection.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import java.io.Serializable;

public class HitClass implements Serializable{
  private static final long serialVersionUID = 1L;


  private String containerId = null;

  /**
   * Describes how the value is used. **incremental:** means the value is added to the stored values. **absolute:** means the value is overriding the current stored value.
   *
   */
  public enum MethodEnum {
    INCREMENTAL("incremental"),
    ABSOLUTE("absolute");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static MethodEnum fromValue(String input) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  private MethodEnum method = null;

  private Integer value = null;

  private String tileId = null;

  private String tileTitle = null;


  @JsonProperty("sourceTime")
  public Integer sourceTime = null;

  @JsonProperty("eventTimeMillis")
  public Long eventTimeMillis = null;

  @JsonProperty("clientTimeMillis")
  public Long clientTimeMillis = null;

  @JsonProperty("hitProducer")
  public String hitProducer = null;

  @JsonProperty("tileGroupPath")
  public String tileGroupPath = null;

  @JsonProperty("tileLabelsJSON")
  public String tileLabelsJSON = null;

  
  @JsonCreator
  public HitClass(@JsonProperty("containerId") String containerId, @JsonProperty("method") MethodEnum method, @JsonProperty("value") Integer value, @JsonProperty("tileId") String tileId, @JsonProperty("tileTitle") String tileTitle) {
    super();
    if(containerId == null) {
      throw new IllegalArgumentException("'containerId' value can not be NULL");
    }
    if(method == null) {
      throw new IllegalArgumentException("'method' value can not be NULL");
    }
    if(value == null) {
      throw new IllegalArgumentException("'value' value can not be NULL");
    }
    if(tileId == null) {
      throw new IllegalArgumentException("'tileId' value can not be NULL");
    }
    if(tileTitle == null) {
      throw new IllegalArgumentException("'tileTitle' value can not be NULL");
    }
    this.containerId = containerId;
    this.method = method;
    this.value = value;
    this.tileId = tileId;
    this.tileTitle = tileTitle;
  }
  
  
 
  @JsonProperty("containerId")
  public String getContainerId() {
    return containerId;
  }  

  @JsonProperty("containerId")
  public void setContainerId(String containerId) {
    if(containerId == null) {
      throw new IllegalArgumentException("'containerId' value can not be NULL");
    }
    this.containerId = containerId;
  }

  @JsonProperty("method")
  public MethodEnum getMethod() {
    return method;
  }  

  @JsonProperty("method")
  public void setMethod(MethodEnum method) {
    if(method == null) {
      throw new IllegalArgumentException("'method' value can not be NULL");
    }
    this.method = method;
  }

  @JsonProperty("value")
  public Integer getValue() {
    return value;
  }  

  @JsonProperty("value")
  public void setValue(Integer value) {
    if(value == null) {
      throw new IllegalArgumentException("'value' value can not be NULL");
    }
    this.value = value;
  }

  @JsonProperty("tileId")
  public String getTileId() {
    return tileId;
  }  

  @JsonProperty("tileId")
  public void setTileId(String tileId) {
    if(tileId == null) {
      throw new IllegalArgumentException("'tileId' value can not be NULL");
    }
    this.tileId = tileId;
  }

  @JsonProperty("tileTitle")
  public String getTileTitle() {
    return tileTitle;
  }  

  @JsonProperty("tileTitle")
  public void setTileTitle(String tileTitle) {
    if(tileTitle == null) {
      throw new IllegalArgumentException("'tileTitle' value can not be NULL");
    }
    this.tileTitle = tileTitle;
  }



  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HitClass hitClass = (HitClass) o;
    return Objects.equals(this.containerId, hitClass.containerId) &&
        Objects.equals(this.sourceTime, hitClass.sourceTime) &&
        Objects.equals(this.eventTimeMillis, hitClass.eventTimeMillis) &&
        Objects.equals(this.clientTimeMillis, hitClass.clientTimeMillis) &&
        Objects.equals(this.hitProducer, hitClass.hitProducer) &&
        Objects.equals(this.method, hitClass.method) &&
        Objects.equals(this.value, hitClass.value) &&
        Objects.equals(this.tileId, hitClass.tileId) &&
        Objects.equals(this.tileTitle, hitClass.tileTitle) &&
        Objects.equals(this.tileGroupPath, hitClass.tileGroupPath) &&
        Objects.equals(this.tileLabelsJSON, hitClass.tileLabelsJSON);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerId, sourceTime, eventTimeMillis, clientTimeMillis, hitProducer, method, value, tileId, tileTitle, tileGroupPath, tileLabelsJSON);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HitClass {\n");
    
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    sourceTime: ").append(toIndentedString(sourceTime)).append("\n");
    sb.append("    eventTimeMillis: ").append(toIndentedString(eventTimeMillis)).append("\n");
    sb.append("    clientTimeMillis: ").append(toIndentedString(clientTimeMillis)).append("\n");
    sb.append("    hitProducer: ").append(toIndentedString(hitProducer)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    tileId: ").append(toIndentedString(tileId)).append("\n");
    sb.append("    tileTitle: ").append(toIndentedString(tileTitle)).append("\n");
    sb.append("    tileGroupPath: ").append(toIndentedString(tileGroupPath)).append("\n");
    sb.append("    tileLabelsJSON: ").append(toIndentedString(tileLabelsJSON)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
