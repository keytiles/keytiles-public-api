/*
 * Keytiles Reporting API
 * API endpoints to manage / query / use Keytiles Reporting. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.reports.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keytiles.api.model.reports.v1.DataTableColumn;
import com.keytiles.api.model.reports.v1.DataTableRow;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;

public class DataTable implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: non-nullable property so Codegen applied a default empty array to it automatically because it is possible with this type 
  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private List<DataTableColumn> columns = new ArrayList<>();

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private List<DataTableRow> rows = new ArrayList<>();


  
  // @Generator: arg 'columns': mandatory field 
  @JsonCreator
  public DataTable(@JsonProperty("columns") List<DataTableColumn> columns) {
    super();
    if(columns == null) {
      throw new IllegalArgumentException("'columns' value can not be NULL");
    }
    this.columns = columns;
  }
  
  
 
  @JsonProperty("columns")
  public List<DataTableColumn> getColumns() {
    return columns;
  }  

  // @Generator: added to protect field 'columns' against null-value assignment 
  @JsonProperty("columns")
  public void setColumns(List<DataTableColumn> columns) {
    if(columns == null) {
      throw new IllegalArgumentException("'columns' value can not be NULL");
    }
    this.columns = columns;
  }

  @JsonProperty("rows")
  public List<DataTableRow> getRows() {
    return rows;
  }  

  // @Generator: added to protect field 'rows' against null-value assignment 
  @JsonProperty("rows")
  public void setRows(List<DataTableRow> rows) {
    if(rows == null) {
      throw new IllegalArgumentException("'rows' value can not be NULL");
    }
    this.rows = rows;
  }



  // @Generator: builder style helper method to add values to not-readonly array field
  public DataTable addColumnsItem(DataTableColumn columnsItem) {
    if (this.columns == null) {
 		this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  // @Generator: builder style helper method to remove values from not-readonly array field
  public DataTable removeColumnsItem(DataTableColumn columnsItem) {
    if (this.columns != null) {
    	this.columns.remove(columnsItem);
    }
    return this;
  }

  // @Generator: builder style helper method to add values to not-readonly array field
  public DataTable addRowsItem(DataTableRow rowsItem) {
    if (this.rows == null) {
 		this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  // @Generator: builder style helper method to remove values from not-readonly array field
  public DataTable removeRowsItem(DataTableRow rowsItem) {
    if (this.rows != null) {
    	this.rows.remove(rowsItem);
    }
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataTable dataTable = (DataTable) o;
    return Objects.equals(this.columns, dataTable.columns) &&
        Objects.equals(this.rows, dataTable.rows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, rows);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataTable {\n");
    
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
