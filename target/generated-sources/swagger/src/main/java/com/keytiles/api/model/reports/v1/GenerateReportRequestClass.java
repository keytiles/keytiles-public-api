/*
 * Keytiles Reporting API
 * API endpoints to manage / query / use Keytiles Reporting. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.reports.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;

public class GenerateReportRequestClass implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Boolean isTestOnly = null;

  // @Generator: non-nullable property so Codegen applied a default empty array to it automatically because it is possible with this type 
  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private List<String> executeQueryIdsOnly = new ArrayList<>();

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Boolean skipNotifications = null;


  
  // @Generator: arg 'isTestOnly': non-nullable and does not have default value - we must enforce a non-null initial value 
  // @Generator: arg 'skipNotifications': non-nullable and does not have default value - we must enforce a non-null initial value 
  @JsonCreator
  public GenerateReportRequestClass(@JsonProperty("isTestOnly") Boolean isTestOnly, @JsonProperty("skipNotifications") Boolean skipNotifications) {
    super();
    if(isTestOnly == null) {
      throw new IllegalArgumentException("'isTestOnly' value can not be NULL");
    }
    if(skipNotifications == null) {
      throw new IllegalArgumentException("'skipNotifications' value can not be NULL");
    }
    this.isTestOnly = isTestOnly;
    this.skipNotifications = skipNotifications;
  }
  
  
 
  @JsonProperty("isTestOnly")
  public Boolean isIsTestOnly() {
    return isTestOnly;
  }  

  // @Generator: added to protect field 'isTestOnly' against null-value assignment 
  @JsonProperty("isTestOnly")
  public void setIsTestOnly(Boolean isTestOnly) {
    if(isTestOnly == null) {
      throw new IllegalArgumentException("'isTestOnly' value can not be NULL");
    }
    this.isTestOnly = isTestOnly;
  }

  @JsonProperty("executeQueryIdsOnly")
  public List<String> getExecuteQueryIdsOnly() {
    return executeQueryIdsOnly;
  }  

  // @Generator: added to protect field 'executeQueryIdsOnly' against null-value assignment 
  @JsonProperty("executeQueryIdsOnly")
  public void setExecuteQueryIdsOnly(List<String> executeQueryIdsOnly) {
    if(executeQueryIdsOnly == null) {
      throw new IllegalArgumentException("'executeQueryIdsOnly' value can not be NULL");
    }
    this.executeQueryIdsOnly = executeQueryIdsOnly;
  }

  @JsonProperty("skipNotifications")
  public Boolean isSkipNotifications() {
    return skipNotifications;
  }  

  // @Generator: added to protect field 'skipNotifications' against null-value assignment 
  @JsonProperty("skipNotifications")
  public void setSkipNotifications(Boolean skipNotifications) {
    if(skipNotifications == null) {
      throw new IllegalArgumentException("'skipNotifications' value can not be NULL");
    }
    this.skipNotifications = skipNotifications;
  }



  // @Generator: builder style helper method to add values to not-readonly array field
  public GenerateReportRequestClass addExecuteQueryIdsOnlyItem(String executeQueryIdsOnlyItem) {
    if (this.executeQueryIdsOnly == null) {
 		this.executeQueryIdsOnly = new ArrayList<>();
    }
    this.executeQueryIdsOnly.add(executeQueryIdsOnlyItem);
    return this;
  }

  // @Generator: builder style helper method to remove values from not-readonly array field
  public GenerateReportRequestClass removeExecuteQueryIdsOnlyItem(String executeQueryIdsOnlyItem) {
    if (this.executeQueryIdsOnly != null) {
    	this.executeQueryIdsOnly.remove(executeQueryIdsOnlyItem);
    }
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateReportRequestClass generateReportRequestClass = (GenerateReportRequestClass) o;
    return Objects.equals(this.isTestOnly, generateReportRequestClass.isTestOnly) &&
        Objects.equals(this.executeQueryIdsOnly, generateReportRequestClass.executeQueryIdsOnly) &&
        Objects.equals(this.skipNotifications, generateReportRequestClass.skipNotifications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isTestOnly, executeQueryIdsOnly, skipNotifications);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateReportRequestClass {\n");
    
    sb.append("    isTestOnly: ").append(toIndentedString(isTestOnly)).append("\n");
    sb.append("    executeQueryIdsOnly: ").append(toIndentedString(executeQueryIdsOnly)).append("\n");
    sb.append("    skipNotifications: ").append(toIndentedString(skipNotifications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
