/*
 * Keytiles Reporting API
 * API endpoints to manage / query / use Keytiles Reporting. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.reports.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keytiles.api.model.reports.v1.MetaData;
import com.keytiles.api.model.reports.v1.ReportQuery;
import com.keytiles.api.model.reports.v1.ReportRecipients;
import com.keytiles.api.model.reports.v1.Schedule;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;

public class ReportSetup implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String id = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private MetaData metaData = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Integer resourceVersion = null;


  // @Generator: field refers to 'Schedule' which is 'nullable=true' so this is inherited into this field 
  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("schedule")
  public Schedule schedule = null;

  // @Generator: field refers to 'ReportRecipients' which is 'nullable=true' so this is inherited into this field 
  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("recipients")
  public ReportRecipients recipients = null;

  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("queries")
  public List<ReportQuery> queries = new ArrayList<>();

  
  // @Generator: arg 'id': mandatory field 
  // @Generator: arg 'metaData': mandatory field 
  // @Generator: arg 'resourceVersion': mandatory field 
  @JsonCreator
  public ReportSetup(@JsonProperty("id") String id, @JsonProperty("metaData") MetaData metaData, @JsonProperty("resourceVersion") Integer resourceVersion) {
    super();
    if(id == null) {
      throw new IllegalArgumentException("'id' value can not be NULL");
    }
    if(metaData == null) {
      throw new IllegalArgumentException("'metaData' value can not be NULL");
    }
    if(resourceVersion == null) {
      throw new IllegalArgumentException("'resourceVersion' value can not be NULL");
    }
    this.id = id;
    this.metaData = metaData;
    this.resourceVersion = resourceVersion;
  }
  
  
 
  @JsonProperty("id")
  public String getId() {
    return id;
  }  

  // @Generator: added to protect field 'id' against null-value assignment 
  @JsonProperty("id")
  public void setId(String id) {
    if(id == null) {
      throw new IllegalArgumentException("'id' value can not be NULL");
    }
    this.id = id;
  }

  @JsonProperty("metaData")
  public MetaData getMetaData() {
    return metaData;
  }  

  // @Generator: added to protect field 'metaData' against null-value assignment 
  @JsonProperty("metaData")
  public void setMetaData(MetaData metaData) {
    if(metaData == null) {
      throw new IllegalArgumentException("'metaData' value can not be NULL");
    }
    this.metaData = metaData;
  }

  @JsonProperty("resourceVersion")
  public Integer getResourceVersion() {
    return resourceVersion;
  }  

  // @Generator: added to protect field 'resourceVersion' against null-value assignment 
  @JsonProperty("resourceVersion")
  public void setResourceVersion(Integer resourceVersion) {
    if(resourceVersion == null) {
      throw new IllegalArgumentException("'resourceVersion' value can not be NULL");
    }
    this.resourceVersion = resourceVersion;
  }



  // @Generator: builder style helper method to add values to not-readonly array field
  public ReportSetup addQueriesItem(ReportQuery queriesItem) {
    if (this.queries == null) {
 		this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

  // @Generator: builder style helper method to remove values from not-readonly array field
  public ReportSetup removeQueriesItem(ReportQuery queriesItem) {
    if (this.queries != null) {
    	this.queries.remove(queriesItem);
    }
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSetup reportSetup = (ReportSetup) o;
    return Objects.equals(this.id, reportSetup.id) &&
        Objects.equals(this.metaData, reportSetup.metaData) &&
        Objects.equals(this.schedule, reportSetup.schedule) &&
        Objects.equals(this.recipients, reportSetup.recipients) &&
        Objects.equals(this.queries, reportSetup.queries) &&
        Objects.equals(this.resourceVersion, reportSetup.resourceVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, metaData, schedule, recipients, queries, resourceVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSetup {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    resourceVersion: ").append(toIndentedString(resourceVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
