/*
 * Keytiles Reporting API
 * API endpoints to manage / query / use Keytiles Reporting. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.reports.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import java.io.Serializable;

public class ChangelogEntry implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Integer time = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String who = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String comment = null;


  
  // @Generator: arg 'time': mandatory field 
  // @Generator: arg 'who': mandatory field 
  // @Generator: arg 'comment': non-nullable and does not have default value - we must enforce a non-null initial value 
  @JsonCreator
  public ChangelogEntry(@JsonProperty("time") Integer time, @JsonProperty("who") String who, @JsonProperty("comment") String comment) {
    super();
    if(time == null) {
      throw new IllegalArgumentException("'time' value can not be NULL");
    }
    if(who == null) {
      throw new IllegalArgumentException("'who' value can not be NULL");
    }
    if(comment == null) {
      throw new IllegalArgumentException("'comment' value can not be NULL");
    }
    this.time = time;
    this.who = who;
    this.comment = comment;
  }
  
  
 
  @JsonProperty("time")
  public Integer getTime() {
    return time;
  }  

  // @Generator: added to protect field 'time' against null-value assignment 
  @JsonProperty("time")
  public void setTime(Integer time) {
    if(time == null) {
      throw new IllegalArgumentException("'time' value can not be NULL");
    }
    this.time = time;
  }

  @JsonProperty("who")
  public String getWho() {
    return who;
  }  

  // @Generator: added to protect field 'who' against null-value assignment 
  @JsonProperty("who")
  public void setWho(String who) {
    if(who == null) {
      throw new IllegalArgumentException("'who' value can not be NULL");
    }
    this.who = who;
  }

  @JsonProperty("comment")
  public String getComment() {
    return comment;
  }  

  // @Generator: added to protect field 'comment' against null-value assignment 
  @JsonProperty("comment")
  public void setComment(String comment) {
    if(comment == null) {
      throw new IllegalArgumentException("'comment' value can not be NULL");
    }
    this.comment = comment;
  }



  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangelogEntry changelogEntry = (ChangelogEntry) o;
    return Objects.equals(this.time, changelogEntry.time) &&
        Objects.equals(this.who, changelogEntry.who) &&
        Objects.equals(this.comment, changelogEntry.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(time, who, comment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangelogEntry {\n");
    
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    who: ").append(toIndentedString(who)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
