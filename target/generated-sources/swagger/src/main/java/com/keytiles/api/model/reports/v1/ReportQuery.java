/*
 * Keytiles Reporting API
 * API endpoints to manage / query / use Keytiles Reporting. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.reports.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keytiles.api.model.reports.v1.MetaData;
import com.keytiles.api.model.reports.v1.ReportQueryPlugin;
import java.util.Map;

import java.io.Serializable;

public class ReportQuery implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String id = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private MetaData metaData = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Boolean isDisabled = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private ReportQueryPlugin plugin = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Map parameters = null;


  
  // @Generator: arg 'id': non-nullable and does not have default value - we must enforce a non-null initial value 
  // @Generator: arg 'metaData': mandatory field 
  // @Generator: arg 'isDisabled': non-nullable and does not have default value - we must enforce a non-null initial value 
  // @Generator: arg 'plugin': mandatory field 
  // @Generator: arg 'parameters': non-nullable and does not have default value - we must enforce a non-null initial value 
  @JsonCreator
  public ReportQuery(@JsonProperty("id") String id, @JsonProperty("metaData") MetaData metaData, @JsonProperty("isDisabled") Boolean isDisabled, @JsonProperty("plugin") ReportQueryPlugin plugin, @JsonProperty("parameters") Map parameters) {
    super();
    if(id == null) {
      throw new IllegalArgumentException("'id' value can not be NULL");
    }
    if(metaData == null) {
      throw new IllegalArgumentException("'metaData' value can not be NULL");
    }
    if(isDisabled == null) {
      throw new IllegalArgumentException("'isDisabled' value can not be NULL");
    }
    if(plugin == null) {
      throw new IllegalArgumentException("'plugin' value can not be NULL");
    }
    if(parameters == null) {
      throw new IllegalArgumentException("'parameters' value can not be NULL");
    }
    this.id = id;
    this.metaData = metaData;
    this.isDisabled = isDisabled;
    this.plugin = plugin;
    this.parameters = parameters;
  }
  
  
 
  @JsonProperty("id")
  public String getId() {
    return id;
  }  

  // @Generator: added to protect field 'id' against null-value assignment 
  @JsonProperty("id")
  public void setId(String id) {
    if(id == null) {
      throw new IllegalArgumentException("'id' value can not be NULL");
    }
    this.id = id;
  }

  @JsonProperty("metaData")
  public MetaData getMetaData() {
    return metaData;
  }  

  // @Generator: added to protect field 'metaData' against null-value assignment 
  @JsonProperty("metaData")
  public void setMetaData(MetaData metaData) {
    if(metaData == null) {
      throw new IllegalArgumentException("'metaData' value can not be NULL");
    }
    this.metaData = metaData;
  }

  @JsonProperty("isDisabled")
  public Boolean isIsDisabled() {
    return isDisabled;
  }  

  // @Generator: added to protect field 'isDisabled' against null-value assignment 
  @JsonProperty("isDisabled")
  public void setIsDisabled(Boolean isDisabled) {
    if(isDisabled == null) {
      throw new IllegalArgumentException("'isDisabled' value can not be NULL");
    }
    this.isDisabled = isDisabled;
  }

  @JsonProperty("plugin")
  public ReportQueryPlugin getPlugin() {
    return plugin;
  }  

  // @Generator: added to protect field 'plugin' against null-value assignment 
  @JsonProperty("plugin")
  public void setPlugin(ReportQueryPlugin plugin) {
    if(plugin == null) {
      throw new IllegalArgumentException("'plugin' value can not be NULL");
    }
    this.plugin = plugin;
  }

  @JsonProperty("parameters")
  public Map getParameters() {
    return parameters;
  }  

  // @Generator: added to protect field 'parameters' against null-value assignment 
  @JsonProperty("parameters")
  public void setParameters(Map parameters) {
    if(parameters == null) {
      throw new IllegalArgumentException("'parameters' value can not be NULL");
    }
    this.parameters = parameters;
  }



  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportQuery reportQuery = (ReportQuery) o;
    return Objects.equals(this.id, reportQuery.id) &&
        Objects.equals(this.metaData, reportQuery.metaData) &&
        Objects.equals(this.isDisabled, reportQuery.isDisabled) &&
        Objects.equals(this.plugin, reportQuery.plugin) &&
        Objects.equals(this.parameters, reportQuery.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, metaData, isDisabled, plugin, parameters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportQuery {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("    plugin: ").append(toIndentedString(plugin)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
