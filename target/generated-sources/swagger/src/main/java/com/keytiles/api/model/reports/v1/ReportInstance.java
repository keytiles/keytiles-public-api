/*
 * Keytiles Reporting API
 * API endpoints to manage / query / use Keytiles Reporting. 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.keytiles.api.model.reports.v1;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keytiles.api.model.reports.v1.ReportInstanceSection;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;

public class ReportInstance implements Serializable{
  private static final long serialVersionUID = 1L;


  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String id = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String parentReportSetupId = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Integer createdAt = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private Boolean isTestOnly = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private String title = null;

  // @Generator: becomes private - as non-nullable so we need to protect it with setter and null-check 
  private List<ReportInstanceSection> sections = new ArrayList<>();


  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("generatorUserId")
  public String generatorUserId = null;

  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("generatorUserNickname")
  public String generatorUserNickname = null;

  // @Generator: becomes public - as nullable (no need to null-check) and not readonly 
  @JsonProperty("description")
  public String description = null;

  
  @JsonCreator
  public ReportInstance(@JsonProperty("id") String id, @JsonProperty("parentReportSetupId") String parentReportSetupId, @JsonProperty("createdAt") Integer createdAt, @JsonProperty("isTestOnly") Boolean isTestOnly, @JsonProperty("title") String title) {
    super();
    if(id == null) {
      throw new IllegalArgumentException("'id' value can not be NULL");
    }
    if(parentReportSetupId == null) {
      throw new IllegalArgumentException("'parentReportSetupId' value can not be NULL");
    }
    if(createdAt == null) {
      throw new IllegalArgumentException("'createdAt' value can not be NULL");
    }
    if(isTestOnly == null) {
      throw new IllegalArgumentException("'isTestOnly' value can not be NULL");
    }
    if(title == null) {
      throw new IllegalArgumentException("'title' value can not be NULL");
    }
    this.id = id;
    this.parentReportSetupId = parentReportSetupId;
    this.createdAt = createdAt;
    this.isTestOnly = isTestOnly;
    this.title = title;
  }
  
  
 
  @JsonProperty("id")
  public String getId() {
    return id;
  }  

  // @Generator: added to protect field 'id' against null-value assignment 
  @JsonProperty("id")
  public void setId(String id) {
    if(id == null) {
      throw new IllegalArgumentException("'id' value can not be NULL");
    }
    this.id = id;
  }

  @JsonProperty("parentReportSetupId")
  public String getParentReportSetupId() {
    return parentReportSetupId;
  }  

  // @Generator: added to protect field 'parentReportSetupId' against null-value assignment 
  @JsonProperty("parentReportSetupId")
  public void setParentReportSetupId(String parentReportSetupId) {
    if(parentReportSetupId == null) {
      throw new IllegalArgumentException("'parentReportSetupId' value can not be NULL");
    }
    this.parentReportSetupId = parentReportSetupId;
  }

  @JsonProperty("createdAt")
  public Integer getCreatedAt() {
    return createdAt;
  }  

  // @Generator: added to protect field 'createdAt' against null-value assignment 
  @JsonProperty("createdAt")
  public void setCreatedAt(Integer createdAt) {
    if(createdAt == null) {
      throw new IllegalArgumentException("'createdAt' value can not be NULL");
    }
    this.createdAt = createdAt;
  }

  @JsonProperty("isTestOnly")
  public Boolean isIsTestOnly() {
    return isTestOnly;
  }  

  // @Generator: added to protect field 'isTestOnly' against null-value assignment 
  @JsonProperty("isTestOnly")
  public void setIsTestOnly(Boolean isTestOnly) {
    if(isTestOnly == null) {
      throw new IllegalArgumentException("'isTestOnly' value can not be NULL");
    }
    this.isTestOnly = isTestOnly;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }  

  // @Generator: added to protect field 'title' against null-value assignment 
  @JsonProperty("title")
  public void setTitle(String title) {
    if(title == null) {
      throw new IllegalArgumentException("'title' value can not be NULL");
    }
    this.title = title;
  }

  @JsonProperty("sections")
  public List<ReportInstanceSection> getSections() {
    return sections;
  }  

  // @Generator: added to protect field 'sections' against null-value assignment 
  @JsonProperty("sections")
  public void setSections(List<ReportInstanceSection> sections) {
    if(sections == null) {
      throw new IllegalArgumentException("'sections' value can not be NULL");
    }
    this.sections = sections;
  }



  // @Generator: builder style helper method to add values to not-readonly array field
  public ReportInstance addSectionsItem(ReportInstanceSection sectionsItem) {
    if (this.sections == null) {
 		this.sections = new ArrayList<>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

  // @Generator: builder style helper method to remove values from not-readonly array field
  public ReportInstance removeSectionsItem(ReportInstanceSection sectionsItem) {
    if (this.sections != null) {
    	this.sections.remove(sectionsItem);
    }
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportInstance reportInstance = (ReportInstance) o;
    return Objects.equals(this.id, reportInstance.id) &&
        Objects.equals(this.parentReportSetupId, reportInstance.parentReportSetupId) &&
        Objects.equals(this.createdAt, reportInstance.createdAt) &&
        Objects.equals(this.isTestOnly, reportInstance.isTestOnly) &&
        Objects.equals(this.generatorUserId, reportInstance.generatorUserId) &&
        Objects.equals(this.generatorUserNickname, reportInstance.generatorUserNickname) &&
        Objects.equals(this.title, reportInstance.title) &&
        Objects.equals(this.description, reportInstance.description) &&
        Objects.equals(this.sections, reportInstance.sections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, parentReportSetupId, createdAt, isTestOnly, generatorUserId, generatorUserNickname, title, description, sections);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportInstance {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentReportSetupId: ").append(toIndentedString(parentReportSetupId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    isTestOnly: ").append(toIndentedString(isTestOnly)).append("\n");
    sb.append("    generatorUserId: ").append(toIndentedString(generatorUserId)).append("\n");
    sb.append("    generatorUserNickname: ").append(toIndentedString(generatorUserNickname)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
