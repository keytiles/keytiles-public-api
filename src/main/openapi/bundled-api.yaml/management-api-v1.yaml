openapi: 3.0.1
info:
  title: Keytiles Management API
  description: API to manage users, permissions, containers, etc.
  version: 1.5.0
servers:
  - url: https://api.keytiles.com/api
    description: PROD server
  - url: https://api-test.keytiles.com/api
    description: TEST server
tags:
  - name: User management REST API
    description: Manage user data
  - name: User related actions API
    description: Actions related to users. RPC style endpoints
  - name: Token related actions API
    description: |
      To execute actions identified by Tokens
        
      During user management there are procedures/flows involving - so called - Tokens. The goal of having Tokens is to intentionally break the flow into multiple steps by decoupling the triggering of the flow from the actual execution. This is happening due to security concerns.
        
      The generated Tokens always have a limited validity period and always stores (internally) all necessary information to complete the execution of the flow once triggered.
        
      The generated Token IDs are never shared and never returned on responses but always sent out to the e-mail address of the User.
  - name: Container management REST API
    description: Manage tracking and setup by managing the Container objects
  - name: Container reports API
    description: Query reports belong to Containers
  - name: Configuration
    description: Query different Keytiles configurations
paths:
  /v1/management/users/rest:
    post:
      summary: Create a new user (registration)
      description: |
        This endpoint can be used without authentication too to start a registration process. (Authentication can be added to authenticate as Keytiles Administrator who has more priviliges)  
          
        By sending in a pre-filled partial User resource you initiate the registration process. To complete the registration flow a Token will be generated and sent to the given e-mail address. Flow can be completed by executing that Token - see '/v1/management/tokens/actions/{tokenId}/execute' endpoint!
      tags:
        - User management REST API
      security:
        - {}
        - basicAuth: []
      requestBody:
        description: The partial User resource to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationClass'
      responses:
        '201':
          description: |
            The User resouce is created - all changes are saved. No further action is needed.
            This happens only if a valid Keytiles Administrator is creating the User. The ID of the new user is returned on the userId header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
          headers:
            X-UserId:
              schema:
                type: string
              description: The ID of the new User resource
        '202':
          description: |
            The User resouce is prepared but further action is needed to complete the registration.
            This is the behavior when endpoint is used without Keytiles Admin authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '400':
          description: There are problems with the creation request. Further information is available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '401':
          description: Authentication failed - you provided invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You do not have permission to do this with the given (or not given at all) credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '409':
          description: This User can not be created as some unique constraints are violated - e.g. e-mail address is already taken. You get more info in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
  /v1/management/users/rest/{userIdTerm}:
    get:
      summary: Query a specific user with one of its IDs
      description: |
        Please note! However if a User account is disabled (isEnabled=false) the user can still query himself. This is required because he could not even realize his account is in a disabled state...
      tags:
        - User management REST API
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userIdTerm'
      responses:
        '200':
          description: The User resouce is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserClass'
        '401':
          description: Authentication failed - you provided invalid credentials or not provided credentials at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You do not have permission to do this with the given credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '404':
          description: The given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '409':
          description: Update failed as some constraints are violated - e.g. server has a newer version already due to concurrent update. You get more info in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
    put:
      summary: Update the user data
      description: |
        Only the User himself or a Keytiles administrator can trigger this request!
          
        Some fields can be modified only by Keytiles administrators. (See field descriptions for more details!) If you try to modify a field like that it might result in a 403 response!
      tags:
        - User management REST API
      security:
        - basicAuth: []
      requestBody:
        description: The modified User resource to save
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserClass'
      parameters:
        - $ref: '#/components/parameters/userIdTerm'
      responses:
        '200':
          description: The User resouce is modified - all changes are saved. No further action is needed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '202':
          description: |
            The User resouce is partially modified already but further action is needed to complete the requested changes.
            Typically this happens when you wanted to modify the e-mail address of the user which requires additional action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '400':
          description: There are problems with the update request. Further information is available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '401':
          description: Authentication failed - you provided invalid credentials or not provided credentials at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You do not have permission to do this with the given credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '404':
          description: The given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
    delete:
      summary: Remove the given User from the system
      description: |
        **Important!** This action can not be undone!
          
        Only the User himself or a Keytiles administrator can trigger this request!  
          
        Please note! However if a User account is disabled (isEnabled=false) the user can still unregister. So this call will also work for disabled users if he wants to remove himself.
      tags:
        - User management REST API
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/userIdTerm'
      responses:
        '200':
          description: The User resouce is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '401':
          description: Authentication failed - you provided invalid credentials or not provided credentials at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You do not have permission to do this with the given credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '404':
          description: The given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
  /v1/management/users/rest/{userIdTerm}/password:
    put:
      summary: Change the password of the user
      description: |
        Password is - however due to its nature is a secret - subresource of the User object. With this call you can set a new value.
          
        Please note: To successfully authenticate you can either send user credentials (when you do know the current password you just want to change it) OR a one-time usable token you previously got via initiating the password reset action. 
      tags:
        - User management REST API
      security:
        - basicAuth: []
        - OneTimeTokenAuth: []
      parameters:
        - $ref: '#/components/parameters/userIdTerm'
      requestBody:
        description: The new password to set
        content:
          text/plain:
            schema:
              type: string
              example: myNewPwd1234!
      responses:
        '200':
          description: The password was changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '401':
          description: Authentication failed - you provided invalid credentials or token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You do not have permission to do this with the given credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '404':
          description: The given user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
  /v1/management/users/actions/{userIdTerm}/password/reset:
    get:
      summary: Triggers password reset procedure
      description: |
        To initiate password reset procedure you just send a GET call on this endpoint. The system will generate a one-time usable token for you which is sent to the e-mail address of the user. Using this token you can one-time authenticate for using the password change endpoint (see in the REST API part!)
          
        If you invoke this method again will generate a new one-time token and will invalidate the previously generated one! 
          
        Please note: Invoking this action does not require any credentials (no auth is needed)
      tags:
        - User related actions API
      parameters:
        - name: userIdTerm
          in: path
          required: true
          description: 'ID of the user who''s password should be reset  - it can be both: the e-mail address or the id too'
          schema:
            type: string
      responses:
        '202':
          description: You always get this answer - regardless if the user exists or not - due to security reasons. If the user exists he will receive an email with further instructions what to do next.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
  /v1/management/users/actions/{userIdTerm}/password/check:
    post:
      summary: To verify if a password sent in the request body matches with the User's password or not
      description: |
        If you build a login functionality anywhere you can use this action to check if the password the user entered on the UI is correct or not
      tags:
        - User related actions API
      parameters:
        - $ref: '#/components/parameters/userIdTerm'
      requestBody:
        description: The password to challenge (simple text)
        content:
          text/plain:
            schema:
              type: string
              example: myPwdToCheck1234!
      responses:
        '200':
          description: The password check was successfully executed - you received the result in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '400':
          description: The given user does not exist or password does not match - any how but we got a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
  /v1/management/tokens/actions/{tokenId}/execute:
    get:
      summary: Triggers execution of the action identified by the given Token
      description: |
        Please note: Invoking this action does not require any credentials (no auth is needed)
      tags:
        - Token related actions API
      parameters:
        - name: tokenId
          in: path
          required: true
          description: ID of the Token to execute
          schema:
            type: string
      responses:
        '200':
          description: The action represented by this Token is now completed
          headers:
            X-UserId:
              schema:
                type: string
              description: If the affected resource was a User resource then the ID of that user is returned here. Otherwise this header will not be present.
            X-ContainerId:
              schema:
                type: string
              description: If the affected resource was a Container resource then the ID of that Container is returned here. Otherwise this header will not be present.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '404':
          description: The given Token does not exist (or was existing but not valid any longer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
  /v1/management/containers/rest:
    get:
      summary: To query multiple Containers at once.
      description: |
        If executed without the 'containerIds' query param then returns all Containers in a list the user has at least 'view' permission.  
          
        You can limit the request to only a specific set of Containers by using the 'containerIds' query param.
      tags:
        - Container management REST API
      security:
        - basicAuth: []
      parameters:
        - name: containerIds
          in: query
          required: false
          description: |
            A comma separated list of Container IDs to query.  
              
            Please note! The method returns only Containers the user has at least 'view' permission to. So it is possible that in the response you do not get back all the Containers you requested if this rule is not fulfilled.
          schema:
            type: string
        - $ref: '#/components/parameters/includeUserDetails'
      responses:
        '200':
          description: List of Container resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContainerClass'
        '401':
          description: Authentication failed - you provided invalid credentials or not provided credentials at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You do not have permission to do this with the given credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
    post:
      summary: To create a Container resource in order to establish tracking in Keytiles
      description: |
        Any registered User can initiate creating a Container.
          
        If the user is Keytiles Admin then the Container is immediatelly created and usable. If the user is a normal user then extra validation step (via Token mechanism) is required to really create the Container 
      tags:
        - Container management REST API
      security:
        - basicAuth: []
      requestBody:
        description: |
          The resource is a partial Container resource with keeping the following rules:  
            
          The minimum attributes you need to set are:
             * name
             * options/trackedDomains
            
          All other attributes will take their default values if not provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerCreationClass'
      responses:
        '201':
          description: The Container resouce is created and usable. (This means the requesting user was a Keytiles Admin) The new resource URI is returned in the Location header
          headers:
            X-ContainerId:
              schema:
                type: string
              description: The ID of the new Container resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '202':
          description: The Container resouce creation request is accepted without errors but additional action is needed to complete. Instructions are sent to the user's e-mail address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '400':
          description: There are problems with the creation request. Further information is available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '401':
          description: Authentication failed - you provided invalid credentials or not provided credentials at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
  /v1/management/containers/rest/{containerId}:
    get:
      summary: Query a Container resource
      description: Only a user with effective "admin" role (over the Container) or a Keytiles Admin can execute this request.
      tags:
        - Container management REST API
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/containerId'
        - $ref: '#/components/parameters/includeUserDetails'
      responses:
        '200':
          description: The Container resouce is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerClass'
        '401':
          description: Authentication failed - you provided invalid credentials or not provided credentials at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You do not have permission to do this with the given credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '404':
          description: The given Container does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
    put:
      summary: To update a Container
      description: |
        Only Keytiles Admins or users with active "admin" role of the Container is allowed to execute this request 
      tags:
        - Container management REST API
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/containerId'
      requestBody:
        description: Please note that the "isEnabled" attribute is only allowed for Keytiles Admins to change!
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerClass'
      responses:
        '200':
          description: The Container resouce is updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '400':
          description: There are problems with the update request. Further information is available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '401':
          description: Authentication failed - you provided invalid credentials or not provided credentials at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You tried to do something you do not have permission to do so. Further information is available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '409':
          description: Update failed as some constraints are violated - e.g. server has a newer version already due to concurrent update. You get more info in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
    delete:
      summary: Remove the given Container from the system
      description: |
        **Important!** This action can not be undone!
          
        The removal will also delete all tracking data associated with the Container!
          
        Only a user with effective "admin" role (over the Container) or a Keytiles Admin can execute this request.
      tags:
        - Container management REST API
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/containerId'
      responses:
        '200':
          description: The Container resouce is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseClass'
        '401':
          description: Authentication failed - you provided invalid credentials or not provided credentials at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You do not have permission to do this with the given credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '404':
          description: The given Container does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
  /v1/management/containers/reports/{containerId}/hitfault:
    get:
      summary: Query Container hit collection faults
      description: |
        You can query Faults Keytiles have seen during processing incoming Hits.  
          
        Please note:
         * Faults returned are not ordered by timestamp! They might come in random order so you might need to sort on Client side!
         * Only a user with effective "admin" or "developer" role (over the Container) can execute this request.
      tags:
        - Container reports API
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/containerId'
        - $ref: '#/components/parameters/fromTimestamp'
        - $ref: '#/components/parameters/toTimestamp'
        - name: tileIdsOnly
          in: query
          required: false
          schema:
            type: string
          description: You can provide a comma separated list of tileIds. If given then only those Faults are returned whos related Tile is matching to the list.
          example: tile123,tile456,tile789
        - name: limit
          in: query
          required: false
          schema:
            type: integer
          description: You can limit how many Faults are returned in the response maximum. Please note that since there is no time order guarantee in this request - so if you limit the number of items they might come in random order from the full time query range.
        - name: faultUrlMatchingOnly
          in: query
          required: false
          schema:
            type: string
          description: |
            Faults are associated with URLs where they happened. Here you can provide a list of comma separated URL matcher strings. If you do so then only those Faults are returned whos associated URL is matching any of the matchers.  
              
            For example:
             * '*/politics/*' will return only those Faults where "/politics/" as substring is found in the URL
             * '*/politics/*, */tags/*/visit*' will return Faults where either "/politics/" is in the URL or the URL is has the "/tags/<anything here>/visit" substring in it
          example: tile123,tile456,tile789
      responses:
        '200':
          description: The Container resouce is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HitFaultReportResponse'
        '401':
          description: Authentication failed - you provided invalid credentials or not provided credentials at all
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '403':
          description: You do not have permission to do this with the given credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
        '404':
          description: The given Container does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineReadableManagementEndpointMessageResponseClass'
  /v1/management/config/referrerclassification:
    get:
      summary: Query Keytiles Referrer Classification config
      description: |
        Returns the current Keytiles server side configuration which is used to classify traffic sources (aka Referrers)  
           
        More info: [https://www.keytiles.com/docs/how-does-referrer-grouping-work](https://www.keytiles.com/docs/how-does-referrer-grouping-work) 
      tags:
        - Configuration
      responses:
        '200':
          description: The Container resouce is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferrerClassifierConfigClass'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: 'Basic HTTP authentication is used which means you need to send your Keytiles username/password in the header - API operations are handled on behalf of the given user. For more info visit: https://en.wikipedia.org/wiki/Basic_access_authentication'
    OneTimeTokenAuth:
      type: apiKey
      in: header
      name: X-Token
      description: 'Some triggered (RPC style) actions result in a Token generation - which is sent (in some form) to the mail address of the User. Then you can use this Token to authenticate for executing a query. Note: typically these Tokens can be used once and also within a strict expiry period.'
  parameters:
    userIdTerm:
      name: userIdTerm
      in: path
      required: true
      description: 'ID of the user to query - it can be both: the e-mail address or the id too'
      schema:
        type: string
    includeUserDetails:
      name: includeUserDetails
      in: query
      required: false
      description: 'Whether to include the *userDetails* list into the Container resource or not - default is: FALSE. Valid values are natural values encoding a boolean so e.g. "true" or "false" or 0 or 1 etc.'
      example: 'true'
      schema:
        type: boolean
    containerId:
      name: containerId
      in: path
      required: true
      description: ID of the container to query stat from
      schema:
        type: string
    fromTimestamp:
      name: fromTimestamp
      in: query
      required: true
      schema:
        type: string
      description: |
        Defines the beginning of the query range - you are interested in data which time is >= than this timestamp.  
          
        Format is mixed. It can be
         * a UNIX timestamp in UTC (seconds since Epoch) e.g.: `1657261221` - means 2022-07-08 6:20:21 GMT  
           (note: server and client clock might be different! see: /v2/system/clock endpoint to query server time)
         * a relative time spec compared to current time in form of 'now[-X<m|h|d>]' where 'm' means minutes, 'h' means hours and 'd' means days,
           e.g.: `now-10m` means 10 minutes earlier compared to current time,
           `now-2h` means 2 hours earlier and so on
           
        This must point to the past!   (note: server validates according to his own clock!)
      example: now-1h
    toTimestamp:
      name: toTimestamp
      in: query
      required: false
      schema:
        type: string
      description: |
        Defines the end of the query range - you are interested in data which time is <= than this timestamp.
          
        **Default value:** the current timestamp, so 'now' if you do not specify this parameter.
          
        Format is mixed. It can be
         * a UNIX timestamp in UTC (seconds since Epoch) e.g.: `1657261221` - means 2022-07-08 6:20:21 GMT  
           (note: server and client clock might be different! see: /v2/system/clock endpoint to query server time)
         * a relative time spec compared to current time in form of 'now[-X<m|h|d>]' where 'm' means minutes, 'h' means hours and 'd' means days,
           e.g.: `now-10m` means 10 minutes earlier compared to current time,
           `now-2h` means 2 hours earlier and so on
           
        Can not point to the future!   (note: server validates according to his own clock!)
  schemas:
    ManagementEndpointLocalErrorCodes:
      type: string
      enum:
        - containerId_missing
        - containerId_invalid
        - containerData_missing
        - containerData_invalid
        - containerData_jsonDecodeFailed
        - containerData_admin_missing
        - containerData_finance_missing
        - userIdTerm_missing
        - userIdTerm_invalid
        - userData_missing
        - userData_invalid
        - userData_jsonDecodeFailed
        - passwordData_missing
        - passwordData_invalid
        - userData_nickname_invalid
        - userData_email_invalid
        - userData_email_alreadyTaken
        - readonlyField_changed
        - protectedField_changed
        - requiredField_missing
        - key_missing
        - key_invalid
        - keyValueData_invalid
        - queryRange_corrected
        - queryRange_from_corrected
        - queryRange_to_corrected
    ManagementEndpointErrorCodes:
      description: NOTE! Error codes is an Enum. Unfortunately in OpenApi (so far) there is no possibility to provide description for Enum values. But we have detailed description of each error codes! Please check the OpenApi file in our Github repo - you find them as comments for each Enum values!
      allOf:
        - $ref: '#/components/schemas/ManagementEndpointLocalErrorCodes'
        - $ref: '#/components/schemas/CommonErrorCodes'
    ManagementEndpointProblemClass:
      allOf:
        - $ref: '#/components/schemas/ProblemBaseClass'
        - type: object
          properties:
            errorCodes:
              type: array
              items:
                $ref: '#/components/schemas/ManagementEndpointErrorCodes'
              nullable: true
              default: []
    MachineReadableManagementEndpointMessageResponseClass:
      allOf:
        - $ref: '#/components/schemas/MessageResponseClass'
        - type: object
          properties:
            problems:
              type: array
              items:
                $ref: '#/components/schemas/ManagementEndpointProblemClass'
              nullable: true
              default: []
              description: List of errors/warnings
    UserContainerLink:
      type: object
      required:
        - containerId
        - roles
      properties:
        containerId:
          type: string
          description: The alpha-numeric unique id of the Container
        role:
          $ref: '#/components/schemas/UserContainerRoleClass'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserContainerRoleClassV2'
    UserCreationClass:
      type: object
      required:
        - email
        - nickname
        - password
      properties:
        email:
          type: string
          description: The desired e-mail address of the user (also this will be the username used during login later)
          example: john.smith@domain.com
        nickname:
          type: string
          minLength: 3
          maxLength: 32
          description: The nickname of the user. This will appear for other users and also the system will use this in notifications. But of course you do not need to use your real name... Single line plain string so any linefeed or tab or other characters will lead to request failure.
          example: ironhawk
        password:
          type: string
          minLength: 8
          maxLength: 32
          description: The password to set after successful e-mail validation flow. Single line plain string so any linefeed or tab or other characters will lead to request failure.
    UserClass:
      type: object
      x-keytiles-serialize-only-if-non-default-properties:
        - data
      required:
        - id
        - version
        - email
        - nickname
        - createdTimestamp
        - isEnabled
        - isKeytilesAdmin
      properties:
        id:
          type: string
          readOnly: true
          description: Randomly generated alpha-numeric unique id of the user
          example: 5fc03-1262304000
        version:
          type: integer
          description: This is the resource version (which is automatically incremented by every change). When you do an update (PUT) you need to send it back! The server will check if it is matching with the resource version he has. If not then that means someone else already did an update in the meantime therefore your request can not be accepted - otherwise you may overwrite the changes someone did.
        email:
          type: string
          description: |
            The validated e-mail address of the user (also this is his username used during login).
              
            Please note that it is possible this attribute is not returned but returns 'secret' as value for confidentiality reasons! This may depend on the credentials and/or the request parameters you use to query this resource!  
              
            It is possible to change the e-mail address via a PUT request (so the login name basically) but depending on who is executing the request it may behave differently. If the user himself is initating the e-mail change then it will require a confirmation of the new e-mail address - a Token will be generated and sent out to the new e-mail address to complete the request. 
          example: john.smith@domain.com
        password:
          type: string
          description: The password of the user used only for updating it but never shown.
        nickname:
          type: string
          minLength: 3
          maxLength: 32
          description: The nickname of the user. This will appear for other users and also the system will use this in notifications. But of course you do not need to use your real name...
        lastLoginTimestamp:
          type: integer
          format: int32
          description: When did this user log in recently? UNIX timestamp in UTC (seconds since Epoch)
          example: 1543355608
          readOnly: true
          nullable: true
        createdTimestamp:
          type: integer
          format: int32
          description: When was this user created? UNIX timestamp in UTC (seconds since Epoch)
          example: 1543355608
          readOnly: true
        isEnabled:
          type: boolean
          description: If FALSE then user account is disabled. Requires Keytiles Admin privilige to be able to modify this - read only otherwise
        isKeytilesAdmin:
          type: boolean
          description: Tells if the user is a Keytiles Admin or not. Requires Keytiles Admin privilige to be able to modify this - read only otherwise
        containers:
          description: |
            List of Containers this user has access to.  
              
            This list is only visible if the resource is queried by the user himself or a Keytiles Admin. For all others this list comes empty as nobody else should see this information.
          type: array
          items:
            $ref: '#/components/schemas/UserContainerLink'
        data:
          nullable: true
          type: object
          description: Extra data of the user - key-value pairs. For internal use only so far - only visible to and manageable by Keytiles Admins.
          additionalProperties:
            type: string
            example: <the str value>
    UserContainerRoleClass:
      deprecated: true
      nullable: true
      type: string
      enum:
        - view
        - admin
      description: DEPRECATED! Older representation of the roles of this link affecting what the User can do with this Container - please use UserContainerRoleClassV2 instead
    UserContainerRoleClassV2:
      type: string
      enum:
        - view
        - admin
        - finance
        - developer
      description: Newer definition of the roles of this link affecting what the User can do with this Container
    ContainerOptionsClass:
      nullable: false
      type: object
      description: |
        Containers have settings - options is the object represents a collection of settings. For creating a container it is enough to start with the mandatory settings. They can be tweaked later via PUT.  
          
        The following options are available:
         * **trackedDomains** : Array - Mandatory setting. List of domain names the tracking in this Container will accept as hit origin.
         * **lookBackTimeWindowSeconds** : Integer - Optional setting. When the real time UI is started this is the default "look back" time period for queries for your users
         * **visitSessionTimeoutSeconds** : Integer - Optional setting. Controls the visitSession length for your tracking. If not set then the system default value is used which is 20 minutes.
         * **preservedQueryParams** : Array - Optional setting. Normally Keytiles is cleaning the URLs the hits are coming from and as a part of this procedure all query parameters are also removed. Except the ones you list here in this array... 
         * **trialEndsAt** : Integer - Optional setting. Gives the time in UNIX timestamp when the trial period of this container ends. If null that means the container is not in trial period. Note: this can not be modified directly!
         * **writeTrafficLimit** : Integer - Controlls the daily write traffic (number of inbound hits) limit. Note: this can not be modified directly!
         * **readTrafficLimit** : Integer - Controlls the daily read traffic limit. Note: this can not be modified directly!
      additionalProperties: true
    ContainerUserLink:
      type: object
      required:
        - userId
        - roles
      properties:
        userId:
          type: string
          description: The alpha-numeric unique id of the User
        role:
          $ref: '#/components/schemas/UserContainerRoleClass'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserContainerRoleClassV2'
    ContainerUserDetails:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          description: The ID of the User
        nickname:
          type: string
        email:
          type: string
          description: The e-mail address of the user. BUT it is possible this field is masked out due to data protection rules and only returns 'secret' as value
    ContainerCreationClass:
      type: object
      description: |
        Partial class of the ContainerClass - can be used in the REST POST endpoint during creating a container.  
          
        Any registered User of Keytiles has the possibility to create a Container and establish tracking.
      required:
        - name
        - businessDomain
        - options
      properties:
        name:
          type: string
          description: An informative name of your Container. Single line plain string so any linefeed or tab or other characters will lead to request failure.
          maxLength: 64
          minLength: 3
        businessDomain:
          type: string
          description: Name of the Keytiles business domain this Container belongs to
          example: webhits_v1.0
        options:
          $ref: '#/components/schemas/ContainerOptionsClass'
    ContainerClass:
      description: |
        Container is the basic object for data collection (a.k.a. tracking).
          
        In order to establish tracking with Keytiles you need to create a "container" for the tracking data.
          
        Any registered User of Keytiles has the possibility to create a Container and establish tracking.
      allOf:
        - $ref: '#/components/schemas/ContainerCreationClass'
        - type: object
          required:
            - id
            - version
            - createdTimestamp
            - isEnabled
          properties:
            id:
              type: string
              readOnly: true
              description: Randomly generated alpha-numeric unique id of the Container
              example: 5fc03-1262304000
            version:
              type: integer
              description: This is the resource version (which is automatically incremented by every change). When you do an update (PUT) you need to send it back! The server will check if it is matching with the resource version he has. If not then that means someone else already did an update in the meantime therefore your request can not be accepted - otherwise you may overwrite the changes someone did.
            createdTimestamp:
              type: integer
              format: int32
              description: When was this Container created? UNIX timestamp in UTC (seconds since Epoch)
              example: 1543355608
              readOnly: true
            isEnabled:
              type: boolean
              description: If FALSE then tracking is disabled. Requires Keytiles Admin privilige to be able to modify this - read only otherwise
            users:
              description: |
                List of user IDs has access over this Container.  
                  
                This list is only visible if the resource is queried by a Container Admin or a Keytiles Admin. For all others this list comes empty as nobody else should see this information.
              type: array
              items:
                $ref: '#/components/schemas/ContainerUserLink'
            userDetails:
              readOnly: true
              description: |
                Provides more details about Users who has access over this Container - but there are some restrictions.  
                  
                First of all - by default this list comes empty - you need to request this using the *includeUserDetails=true* query argument.  
                  
                Furthermore * If the resource is queried by a Container Admin or a Keytiles Admin then it contains full info about every users so no restrictions * But if the resource is queried by a normal member of the Container then limited the way it only exposes e-mail addresses of the Container Admins - others mail address is kept in secret
              type: array
              items:
                $ref: '#/components/schemas/ContainerUserDetails'
    ReferrerClassifierConfigClass:
      type: object
      properties:
        name:
          type: string
        domainRegex:
          type: string
          description: Regex pattern matched against the domain name
        pathRegex:
          type: string
          description: Regex pattern - if given then matched against the URI path part of the url
        classifierClassName:
          type: string
          description: Name of the plugin responsible for doing the classification. We have 'SearchReferrer', 'SocialReferrer' and 'LinkReferrer' plugins (basically)
        options:
          type: string
          description: Options are plugin dependent key:value pairs - encoded into a string format.
    HitFaultReportResponse:
      allOf:
        - $ref: '#/components/schemas/ContainerQueryRangeResponseClass'
        - type: object
          properties:
            faults:
              type: array
              items:
                $ref: '#/components/schemas/HitFaultClass'
    HitFaultClass:
      type: object
      required:
        - faultTimestamp
        - faultType
        - errorCode
      properties:
        faultTimestamp:
          type: integer
          description: Timestamp of the fault - UNIX timestamp in UTC (seconds since Epoch)
        faultType:
          $ref: '#/components/schemas/HitFaultType'
        errorCode:
          type: string
          description: The textual error code describes the problem. This is a machine readable error.
        tileId:
          type: string
          description: The ID of the associated Tile. This comes from the 'tileId' attribute of the inbound hit.
          nullable: true
        faultUrl:
          type: string
          description: The URL associated with this fault. This comes from the 'tileUrl' attribute of the inbound hit.
          nullable: true
        hitProducer:
          type: string
          description: The agent which sent this the hit in. This comes from the 'hitProducer' attribute of the inbound hit.
          nullable: true
        errorDescription:
          type: string
          description: The human readable error description.
          nullable: true
    HitFaultType:
      type: string
      enum:
        - error
        - warn
        - unknown
    ProblemPlaceEnum:
      type: string
      enum:
        - queryParam
        - urlParam
        - url
        - requestBody
        - requestHeader
        - responseBody
        - responseHeader
        - responseStatusCode
        - remoteService
        - cookie
        - persistence
        - calculated
      description: This info piece is most useful for 400 - "Bad Request" problems but can be meaningful of course in other scenarios too. It marks the place which has the problem.
      nullable: true
    CommonErrorCodes:
      type: string
      enum:
        - url_invalid
        - actionToken_internalError
        - actionToken_missing
        - actionToken_invalid
        - actionToken_unknownType
        - authentication_missing
        - authentication_internalError
        - authentication_invalid_credentials
        - authentication_userDisabled
        - authentication_base64DecodeFailed
        - authentication_methodNotSupported
        - authorization_noPermission
        - requestParameter_wrongFormat
        - requestParameter_missing
        - requestParameter_invalid
        - requestParameter_not_supported
        - requestParameter_pointless
        - requestParameter_contradicting
        - requestParameter_conflict
        - resourceData_wrongFormat
        - resourceData_missing
        - resourceData_invalid
        - resourceData_not_supported
        - resourceData_pointless
        - resourceData_contradicting
        - resourceData_conflict
        - resourceVersion_mismatch
        - mandatoryEmailSending_failed
        - requestData_wrongFormat
        - requestData_missing
        - requestData_invalid
        - requestData_not_supported
        - requestData_contradicting
        - query_limit_reached
        - field_deprecated
        - underlying_resource_unavailable
    ProblemBaseClass:
      type: object
      required:
        - severity
        - message
      properties:
        severity:
          type: string
          enum:
            - warning
            - error
          example: warning|error
        message:
          type: string
          description: The problem in human readable form
        place:
          $ref: '#/components/schemas/ProblemPlaceEnum'
        placeName:
          type: string
          nullable: true
          description: If it makes sense it tells you which place was problematic. E.g. if a request parameter should be an Integer but you send in something wrong then "placeName" will tell you exactly which request parameter was wrong.
        errorCodes:
          type: array
          items:
            $ref: '#/components/schemas/CommonErrorCodes'
          default: []
          nullable: true
    BaseResponseClass:
      type: object
      required:
        - requestReceivedAt
      properties:
        requestReceivedAt:
          type: integer
          format: int32
          description: The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
          example: 1543355710
        processingTookMillis:
          type: integer
          format: int32
          nullable: true
          description: Number of milliseconds the processing took on server side
        problems:
          type: array
          items:
            $ref: '#/components/schemas/ProblemBaseClass'
          nullable: true
          default: []
          description: List of errors/warnings
        vars:
          nullable: true
          type: object
          description: Extra data (variables) the endpoint wants to return for programmatic processing.
          additionalProperties: true
    MessageResponseClass:
      allOf:
        - $ref: '#/components/schemas/BaseResponseClass'
        - type: object
          properties:
            message:
              type: string
              description: The human readable message
    ResponseContainerInfoClass:
      type: object
      nullable: true
      required:
        - id
      properties:
        id:
          type: string
          description: The ID of the container - this is typically a UUID like value
          example: d72c640b-d963-4789-bd48-9a38f381eaa6
        name:
          type: string
          description: The name of the container
          example: My Website
    ContainerResponseClass:
      allOf:
        - $ref: '#/components/schemas/BaseResponseClass'
        - type: object
          required:
            - container
          properties:
            container:
              $ref: '#/components/schemas/ResponseContainerInfoClass'
    ContainerQueryRangeResponseClass:
      allOf:
        - $ref: '#/components/schemas/ContainerResponseClass'
        - type: object
          required:
            - requestedFromTimestamp
            - requestedToTimestamp
            - dataFromTimestamp
            - dataToTimestamp
          properties:
            requestedFromTimestamp:
              type: integer
              format: int32
              description: In the request you requested data starting by this UNIX timestamp in UTC (seconds since Epoch)
              example: 1543355608
            requestedToTimestamp:
              type: integer
              format: int32
              description: In the request you requested data until this UNIX timestamp in UTC (seconds since Epoch)
              example: 1543355708
            dataFromTimestamp:
              type: integer
              format: int32
              description: This response contains data starting by this UNIX timestamp in UTC (seconds since Epoch) - will be always rounded to at least minutes or even more (see section "Interval of your interest" above!)
              example: 1543355608
            dataToTimestamp:
              type: integer
              format: int32
              description: This response contains data until this UNIX timestamp in UTC (seconds since Epoch)
              example: 1543355708
