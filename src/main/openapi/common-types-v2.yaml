openapi: 3.0.1

info:
  version: '1.0'
  title: Common object definitions
  description: "These object definitions are shared among multiple contracts"

paths: {}

components:

  parameters:
  
    containerId:
      name: containerId
      in: path
      required: true
      description: 'ID of the container to query stat from'
      schema:
        type: string
        
    fromTimestamp:
      name: fromTimestamp
      in: query
      required: true
      schema:
        type: string
      description: >
                    Defines the beginning of the query range - you are interested in data which time is >= than this timestamp.  
                      
                    Format is mixed. It can be
                     * a UNIX timestamp in UTC (seconds since Epoch) e.g.: `1657261221` - means 2022-07-08 6:20:21 GMT  
                       (note: server and client clock might be different! see: /v2/system/clock endpoint to query server time)
                     * a relative time spec compared to current time in form of 'now[-X<m|h|d>]' where 'm' means minutes, 'h' means hours and 'd' means days,
                       e.g.: `now-10m` means 10 minutes earlier compared to current time,
                       `now-2h` means 2 hours earlier and so on
                       
                    This must point to the past!  
                    (note: server validates according to his own clock!)
      example: now-1h
                    
    toTimestamp:
      name: toTimestamp
      in: query
      required: false
      schema:
        type: string
      description: >
                    Defines the end of the query range - you are interested in data which time is <= than this timestamp.
                      
                    **Default value:** the current timestamp, so 'now' if you do not specify this parameter.
                      
                    Format is mixed. It can be
                     * a UNIX timestamp in UTC (seconds since Epoch) e.g.: `1657261221` - means 2022-07-08 6:20:21 GMT  
                       (note: server and client clock might be different! see: /v2/system/clock endpoint to query server time)
                     * a relative time spec compared to current time in form of 'now[-X<m|h|d>]' where 'm' means minutes, 'h' means hours and 'd' means days,
                       e.g.: `now-10m` means 10 minutes earlier compared to current time,
                       `now-2h` means 2 hours earlier and so on
                       
                    Can not point to the future!  
                    (note: server validates according to his own clock!)

  schemas:

    # This enum defines global error codes which could appear basically in any API Endpoints
    # note: no support in OpenApi for now how to document values so we just add the description as comments for now.
    #       see: https://github.com/OAI/OpenAPI-Specification/issues/348 
    CommonErrorCodes:
      type: string
      enum:
      # The URL of the request does not make sense - this endpoing does not exist
      - url_invalid
      # ActionTokens are short lived information system is using to do something on behalf of a user or to find and execute a prepared action.
      # This error means that however the system recognized a token on the request but for some reason could not perform the / validate the token, something failed somewhere 
      - actionToken_internalError
      # The context of this error code is that a prepared, "waiting to be executed", identified by a short-lived token action was invoked but the ActionToken was not provided in the request. 
      - actionToken_missing
      # The token either does not exist or already expired - anyways, the original flow/process should be repeated in this case to get a new token
      - actionToken_invalid
      # Every ActionToken "knows" what he is doing / was created for. And it looks the system ran into a token which it does not recognize what to do with it. This is most likely a bug if you see this - please report to support@
      - actionToken_unknownType
      # A propetected endpoint was invoked which requires a valid user to execute the operation on behalf - but the authentication information was simpply missing from the request 
      - authentication_missing
      # A propetected endpoint was invoked which requires a valid user to execute the operation on behalf. The auth information was found on the request but system - for some reason - has failed to validate the info 
      - authentication_internalError
      # A propetected endpoint was invoked which requires a valid user to execute the operation on behalf. The auth info was found in the request but either the user does not exist, or the provided password was not matching - anyhow, something was wrong with the given credentials
      - authentication_invalid_credentials
      # A propetected endpoint was invoked which requires a valid user to execute the operation on behalf. Everything was fine (user found, ppassword ok, etc) but this user account is disabled so not allowed to execute any opration. Contact support@ to resolve this issue
      - authentication_userDisabled
      # A propetected endpoint was invoked which requires a valid user to execute the operation on behalf. The auth info was there but the auth method is involving Base64 decode operation which decode has actually failed... So something is wrong with the data. This e.g. happens with BasicAuth method (username+password)
      - authentication_base64DecodeFailed
      # A propetected endpoint was invoked which requires a valid user to execute the operation on behalf. Auth info was found on the request but the system does not support this type of authentication
      - authentication_methodNotSupported
      # One of the request parameters/arguments were sent in a format which is not the expected one. For example we were expected a Boolean value like "true" but we received maybe "abc" - which can not be converted into a boolean
      - requestParameter_wrongFormat
      # One of the mandatory request parameters/arguments was missing
      - requestParameter_missing
      # One of the request parameters/arguments is supposed to be either one of some predefined values (typically an Enum or similar), or something which requires a specific format for example and email address or similar - but something else has arrived which is therefore not supported / understood by the endpoint
      - requestParameter_invalid
      # One of the request parameters/arguments is not supported by this endpoint
      - requestParameter_not_supported
      # In REST style endpoints Keytiles is using resource versioning to detect and avoid issues might be caused by race conditions. When this situation is detected the endpoint is raising this error so the caller knows he should start over the whole thing because someone else has modified the same resource just in parallel.
      - resourceVersion_mismatch
      # There are certain processes / flows which require confirmation via e-mail. In these cases sending out the confirm email successfully is crucial part of the process. If this fails then this error code is raised because Keytiles knows exactly the process can not be finished for sure.
      - mandatoryEmailSending_failed

    ProblemPlaceEnum:
      type: string
      enum:
      - queryParam
      - urlParam
      - url
      - requestBody
      - requestHeader
      - responseBody
      - responseHeader
      - responseStatusCode
      - remoteService
      - cookie
      - persistence
      - calculated
      description: 'This info piece is most useful for 400 - "Bad Request" problems but can be meaningful of course in other scenarios too. It marks the place which has the problem.'
      nullable: true

    # An entry like this describes a problem - typically we support list of problems
    # A problem can be a Warning or an Error
    ProblemBaseClass:
      type: object
      required:
      - severity
      - message
      properties:
        severity:
          type: string
          enum: [warning, error]
          example: 'warning|error'
        message:
          type: string
          description: 'The problem in human readable form'
        place:
          $ref: "#/components/schemas/ProblemPlaceEnum"
        placeName:
          type: string
          nullable: true
          description: 'If it makes sense it tells you which place was problematic. E.g. if a request parameter should be an Integer but you send in something wrong then "placeName" will tell you exactly which request parameter was wrong.'
        # we need to make this field public in the model to allow override!
        errorCodes:
          type: array
          items:
            $ref: "#/components/schemas/CommonErrorCodes"
          default: []
          nullable: true

    BaseResponseClass:
      type: object
      required:
      - requestReceivedAt
      properties:
        requestReceivedAt:
          type: integer
          format: int32
          description: "The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started"
          example: 1543355710
        processingTookMillis:
          type: integer
          format: int32
          nullable: true
          description: "Number of milliseconds the processing took on server side"
        # we need to make this field public in the model to allow override!
        problems:
          type: array
          items:
            $ref: '#/components/schemas/ProblemBaseClass'
          nullable: true
          default: []
          description: 'List of errors/warnings'


    MessageResponseClass:
      allOf:
      - $ref: '#/components/schemas/BaseResponseClass'
      type: object
      properties:
        message:
          type: string
          description: "The human readable message"

    ResponseContainerInfoClass:
      type: object
      nullable: true
      required:
      - id
      properties:
        id:
          type: string
          description: "The ID of the container - this is typically a UUID like value"
          example: "d72c640b-d963-4789-bd48-9a38f381eaa6"
        name:
          type: string
          description: "The name of the container"
          example: "My Website"

    ContainerResponseClass:
      allOf:
      - $ref: '#/components/schemas/BaseResponseClass'
      type: object
      required:
      - container
      properties:
        container:
          $ref: '#/components/schemas/ResponseContainerInfoClass'

    # Let's deprecate this! We do not need this so strict anymore
#    TileTypeEnum:
#      type: string
#      nullable: true
#      enum: [frontpage, page, article]
#      description: "Possible values for type of tiles"                    

      
    # note: model generation made mistake here: own added properties were missing
    # googling lead here: https://github.com/swagger-api/swagger-core/issues/1601
    # thats the reason why inheritance looks like this
    ContainerQueryRangeResponseClass:
      allOf:
      - $ref: '#/components/schemas/ContainerResponseClass'    
      type: object
      required:
      - requestedFromTimestamp
      - requestedToTimestamp
      - dataFromTimestamp
      - dataToTimestamp
      properties:
        requestedFromTimestamp:
          type: integer
          format: int32
          description: 'In the request you requested data starting by this UNIX timestamp in UTC (seconds since Epoch)'
          example: 1543355608
        requestedToTimestamp:
          type: integer
          format: int32
          description: "In the request you requested data until this UNIX timestamp in UTC (seconds since Epoch)"
          example: 1543355708
        dataFromTimestamp:
          type: integer
          format: int32
          description: 'This response contains data starting by this UNIX timestamp in UTC (seconds since Epoch) - will be always rounded to at least minutes or even more (see section "Interval of your interest" above!)'
          example: 1543355608
        dataToTimestamp:
          type: integer
          format: int32
          description: "This response contains data until this UNIX timestamp in UTC (seconds since Epoch)"
          example: 1543355708



          
      