// Package kt_pubapi_gen_reportsv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package kt_pubapi_gen_reportsv1

import (
	"encoding/json"

	externalRef0 "github.com/keytiles/keytiles-public-api/gopkg/model/generated/common/schedule_v1"
	externalRef1 "github.com/keytiles/keytiles-public-api/gopkg/model/generated/common/types_v2"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for ReportsEndpointLocalErrorCodes.
const (
	ContainerIdInvalid ReportsEndpointLocalErrorCodes = "containerId_invalid"
	ContainerIdMissing ReportsEndpointLocalErrorCodes = "containerId_missing"
)

// GetContainerReportsResponseClass defines model for GetContainerReportsResponseClass.
type GetContainerReportsResponseClass = externalRef1.MessageResponseClass

// ReportClass defines model for ReportClass.
type ReportClass struct {
	// Id The unique ID of this report setup - UUID style
	Id string `json:"id"`

	// Schedule Describes a Schedule of something. As of now you have basically 4 types: hourly, daily, weekly and Monthly schedules.
	Schedule *externalRef0.Schedule `json:"schedule,omitempty"`
}

// ReportsEndpointErrorCodes NOTE! Error codes is an Enum. Unfortunately in OpenApi (so far) there is no possibility to provide description for Enum values. But we have detailed description of each error codes! Please check the OpenApi file in our Github repo - you find them as comments for each Enum values!
type ReportsEndpointErrorCodes struct {
	union json.RawMessage
}

// ReportsEndpointLocalErrorCodes defines model for ReportsEndpointLocalErrorCodes.
type ReportsEndpointLocalErrorCodes string

// ReportsEndpointProblemClass defines model for ReportsEndpointProblemClass.
type ReportsEndpointProblemClass = externalRef1.ProblemBaseClass

// AsReportsEndpointLocalErrorCodes returns the union data inside the ReportsEndpointErrorCodes as a ReportsEndpointLocalErrorCodes
func (t ReportsEndpointErrorCodes) AsReportsEndpointLocalErrorCodes() (ReportsEndpointLocalErrorCodes, error) {
	var body ReportsEndpointLocalErrorCodes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReportsEndpointLocalErrorCodes overwrites any union data inside the ReportsEndpointErrorCodes as the provided ReportsEndpointLocalErrorCodes
func (t *ReportsEndpointErrorCodes) FromReportsEndpointLocalErrorCodes(v ReportsEndpointLocalErrorCodes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// AsExternalRef1CommonErrorCodes returns the union data inside the ReportsEndpointErrorCodes as a externalRef1.CommonErrorCodes
func (t ReportsEndpointErrorCodes) AsExternalRef1CommonErrorCodes() (externalRef1.CommonErrorCodes, error) {
	var body externalRef1.CommonErrorCodes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalRef1CommonErrorCodes overwrites any union data inside the ReportsEndpointErrorCodes as the provided externalRef1.CommonErrorCodes
func (t *ReportsEndpointErrorCodes) FromExternalRef1CommonErrorCodes(v externalRef1.CommonErrorCodes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t ReportsEndpointErrorCodes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReportsEndpointErrorCodes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
