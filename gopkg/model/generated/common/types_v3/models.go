// Package kt_pubapi_gen_common_typesv3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package kt_pubapi_gen_common_typesv3

// Defines values for CommonErrorCodesV3.
const (
	ActionTokenInternalError         CommonErrorCodesV3 = "actionToken_internalError"
	ActionTokenInvalid               CommonErrorCodesV3 = "actionToken_invalid"
	ActionTokenMissing               CommonErrorCodesV3 = "actionToken_missing"
	ActionTokenUnknownType           CommonErrorCodesV3 = "actionToken_unknownType"
	AuthenticationBase64DecodeFailed CommonErrorCodesV3 = "authentication_base64DecodeFailed"
	AuthenticationInternalError      CommonErrorCodesV3 = "authentication_internalError"
	AuthenticationInvalidCredentials CommonErrorCodesV3 = "authentication_invalid_credentials"
	AuthenticationMethodNotSupported CommonErrorCodesV3 = "authentication_methodNotSupported"
	AuthenticationMissing            CommonErrorCodesV3 = "authentication_missing"
	AuthenticationUserDisabled       CommonErrorCodesV3 = "authentication_userDisabled"
	AuthorizationNoPermission        CommonErrorCodesV3 = "authorization_noPermission"
	FieldDeprecated                  CommonErrorCodesV3 = "field_deprecated"
	MandatoryEmailSendingFailed      CommonErrorCodesV3 = "mandatoryEmailSending_failed"
	QueryLimitReached                CommonErrorCodesV3 = "query_limit_reached"
	RequestDataContradicting         CommonErrorCodesV3 = "requestData_contradicting"
	RequestDataInvalid               CommonErrorCodesV3 = "requestData_invalid"
	RequestDataMissing               CommonErrorCodesV3 = "requestData_missing"
	RequestDataNotSupported          CommonErrorCodesV3 = "requestData_not_supported"
	RequestDataWrongFormat           CommonErrorCodesV3 = "requestData_wrongFormat"
	RequestParameterConflict         CommonErrorCodesV3 = "requestParameter_conflict"
	RequestParameterContradicting    CommonErrorCodesV3 = "requestParameter_contradicting"
	RequestParameterInvalid          CommonErrorCodesV3 = "requestParameter_invalid"
	RequestParameterMissing          CommonErrorCodesV3 = "requestParameter_missing"
	RequestParameterNotSupported     CommonErrorCodesV3 = "requestParameter_not_supported"
	RequestParameterPointless        CommonErrorCodesV3 = "requestParameter_pointless"
	RequestParameterWrongFormat      CommonErrorCodesV3 = "requestParameter_wrongFormat"
	ResourceDataConflict             CommonErrorCodesV3 = "resourceData_conflict"
	ResourceDataContradicting        CommonErrorCodesV3 = "resourceData_contradicting"
	ResourceDataInvalid              CommonErrorCodesV3 = "resourceData_invalid"
	ResourceDataMissing              CommonErrorCodesV3 = "resourceData_missing"
	ResourceDataNotSupported         CommonErrorCodesV3 = "resourceData_not_supported"
	ResourceDataPointless            CommonErrorCodesV3 = "resourceData_pointless"
	ResourceDataWrongFormat          CommonErrorCodesV3 = "resourceData_wrongFormat"
	ResourceVersionMismatch          CommonErrorCodesV3 = "resourceVersion_mismatch"
	UnderlyingResourceUnavailable    CommonErrorCodesV3 = "underlying_resource_unavailable"
	UrlInvalid                       CommonErrorCodesV3 = "url_invalid"
)

// Defines values for ProblemPlaceEnumV3.
const (
	Calculated         ProblemPlaceEnumV3 = "calculated"
	Cookie             ProblemPlaceEnumV3 = "cookie"
	Persistence        ProblemPlaceEnumV3 = "persistence"
	QueryParam         ProblemPlaceEnumV3 = "queryParam"
	RemoteService      ProblemPlaceEnumV3 = "remoteService"
	RequestBody        ProblemPlaceEnumV3 = "requestBody"
	RequestHeader      ProblemPlaceEnumV3 = "requestHeader"
	ResponseBody       ProblemPlaceEnumV3 = "responseBody"
	ResponseHeader     ProblemPlaceEnumV3 = "responseHeader"
	ResponseStatusCode ProblemPlaceEnumV3 = "responseStatusCode"
	Url                ProblemPlaceEnumV3 = "url"
	UrlParam           ProblemPlaceEnumV3 = "urlParam"
)

// Defines values for ProblemV3ClassSeverity.
const (
	Error   ProblemV3ClassSeverity = "error"
	Warning ProblemV3ClassSeverity = "warning"
)

// BaseResponseV3Class defines model for BaseResponseV3Class.
type BaseResponseV3Class struct {
	// Problems List of errors/warnings
	Problems *[]ProblemV3Class `json:"problems" yaml:"problems"`

	// ProcessingTookMillis Number of milliseconds the processing took on server side
	ProcessingTookMillis *int32 `json:"processingTookMillis" yaml:"processingTookMillis"`

	// RequestReceivedAt The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
	RequestReceivedAt int32 `json:"requestReceivedAt" yaml:"requestReceivedAt"`

	// Vars Extra data (variables) the endpoint wants to return for programmatic processing.
	Vars *map[string]interface{} `json:"vars" yaml:"vars"`
}

// CommonErrorCodesV3 defines model for CommonErrorCodesV3.
type CommonErrorCodesV3 string

// ContainerQueryRangeResponseV3Class defines model for ContainerQueryRangeResponseV3Class.
type ContainerQueryRangeResponseV3Class struct {
	Container *ResponseContainerInfoV3Class `json:"container" yaml:"container"`

	// DataFromTimestamp This response contains data starting by this UNIX timestamp in UTC (seconds since Epoch) - will be always rounded to at least minutes or even more (see section "Interval of your interest" above!)
	DataFromTimestamp int32 `json:"dataFromTimestamp" yaml:"dataFromTimestamp"`

	// DataToTimestamp This response contains data until this UNIX timestamp in UTC (seconds since Epoch)
	DataToTimestamp int32 `json:"dataToTimestamp" yaml:"dataToTimestamp"`

	// Problems List of errors/warnings
	Problems *[]ProblemV3Class `json:"problems" yaml:"problems"`

	// ProcessingTookMillis Number of milliseconds the processing took on server side
	ProcessingTookMillis *int32 `json:"processingTookMillis" yaml:"processingTookMillis"`

	// RequestReceivedAt The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
	RequestReceivedAt int32 `json:"requestReceivedAt" yaml:"requestReceivedAt"`

	// RequestedFromTimestamp In the request you requested data starting by this UNIX timestamp in UTC (seconds since Epoch)
	RequestedFromTimestamp int32 `json:"requestedFromTimestamp" yaml:"requestedFromTimestamp"`

	// RequestedToTimestamp In the request you requested data until this UNIX timestamp in UTC (seconds since Epoch)
	RequestedToTimestamp int32 `json:"requestedToTimestamp" yaml:"requestedToTimestamp"`

	// Vars Extra data (variables) the endpoint wants to return for programmatic processing.
	Vars *map[string]interface{} `json:"vars" yaml:"vars"`
}

// ContainerResponseV3Class defines model for ContainerResponseV3Class.
type ContainerResponseV3Class struct {
	Container *ResponseContainerInfoV3Class `json:"container" yaml:"container"`

	// Problems List of errors/warnings
	Problems *[]ProblemV3Class `json:"problems" yaml:"problems"`

	// ProcessingTookMillis Number of milliseconds the processing took on server side
	ProcessingTookMillis *int32 `json:"processingTookMillis" yaml:"processingTookMillis"`

	// RequestReceivedAt The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
	RequestReceivedAt int32 `json:"requestReceivedAt" yaml:"requestReceivedAt"`

	// Vars Extra data (variables) the endpoint wants to return for programmatic processing.
	Vars *map[string]interface{} `json:"vars" yaml:"vars"`
}

// MessageResponseV3Class defines model for MessageResponseV3Class.
type MessageResponseV3Class struct {
	// Message The human readable message
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// Problems List of errors/warnings
	Problems *[]ProblemV3Class `json:"problems" yaml:"problems"`

	// ProcessingTookMillis Number of milliseconds the processing took on server side
	ProcessingTookMillis *int32 `json:"processingTookMillis" yaml:"processingTookMillis"`

	// RequestReceivedAt The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
	RequestReceivedAt int32 `json:"requestReceivedAt" yaml:"requestReceivedAt"`

	// Vars Extra data (variables) the endpoint wants to return for programmatic processing.
	Vars *map[string]interface{} `json:"vars" yaml:"vars"`
}

// ProblemPlaceEnumV3 This info piece is most useful for 400 - "Bad Request" problems but can be meaningful of course in other scenarios too. It marks the place which has the problem.
type ProblemPlaceEnumV3 string

// ProblemV3Class defines model for ProblemV3Class.
type ProblemV3Class struct {
	ErrorCodes *[]string `json:"errorCodes" yaml:"errorCodes"`

	// Message The problem in human readable form
	Message string `json:"message" yaml:"message"`

	// Place This info piece is most useful for 400 - "Bad Request" problems but can be meaningful of course in other scenarios too. It marks the place which has the problem.
	Place *ProblemPlaceEnumV3 `json:"place" yaml:"place"`

	// PlaceName If it makes sense it tells you which place was problematic. E.g. if a request parameter should be an Integer but you send in something wrong then "placeName" will tell you exactly which request parameter was wrong.
	PlaceName *string                `json:"placeName" yaml:"placeName"`
	Severity  ProblemV3ClassSeverity `json:"severity" yaml:"severity"`
}

// ProblemV3ClassSeverity defines model for ProblemV3Class.Severity.
type ProblemV3ClassSeverity string

// ResponseContainerInfoV3Class defines model for ResponseContainerInfoV3Class.
type ResponseContainerInfoV3Class struct {
	// Id The ID of the container - this is typically a UUID like value
	Id string `json:"id" yaml:"id"`

	// Name The name of the container
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// ContainerId defines model for containerId.
type ContainerId = string

// FromTimestamp defines model for fromTimestamp.
type FromTimestamp = string

// ToTimestamp defines model for toTimestamp.
type ToTimestamp = string
