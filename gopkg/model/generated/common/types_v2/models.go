// Package kt_pubapi_gen_common_typesv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package kt_pubapi_gen_common_typesv2

// Defines values for CommonErrorCodes.
const (
	ActionTokenInternalError         CommonErrorCodes = "actionToken_internalError"
	ActionTokenInvalid               CommonErrorCodes = "actionToken_invalid"
	ActionTokenMissing               CommonErrorCodes = "actionToken_missing"
	ActionTokenUnknownType           CommonErrorCodes = "actionToken_unknownType"
	AuthenticationBase64DecodeFailed CommonErrorCodes = "authentication_base64DecodeFailed"
	AuthenticationInternalError      CommonErrorCodes = "authentication_internalError"
	AuthenticationInvalidCredentials CommonErrorCodes = "authentication_invalid_credentials"
	AuthenticationMethodNotSupported CommonErrorCodes = "authentication_methodNotSupported"
	AuthenticationMissing            CommonErrorCodes = "authentication_missing"
	AuthenticationUserDisabled       CommonErrorCodes = "authentication_userDisabled"
	DataContradictingRequest         CommonErrorCodes = "data_contradictingRequest"
	FieldDeprecated                  CommonErrorCodes = "field_deprecated"
	MandatoryEmailSendingFailed      CommonErrorCodes = "mandatoryEmailSending_failed"
	QueryLimitReached                CommonErrorCodes = "query_limit_reached"
	RequestParameterConflict         CommonErrorCodes = "requestParameter_conflict"
	RequestParameterContradicting    CommonErrorCodes = "requestParameter_contradicting"
	RequestParameterInvalid          CommonErrorCodes = "requestParameter_invalid"
	RequestParameterMissing          CommonErrorCodes = "requestParameter_missing"
	RequestParameterNotSupported     CommonErrorCodes = "requestParameter_not_supported"
	RequestParameterPointless        CommonErrorCodes = "requestParameter_pointless"
	RequestParameterWrongFormat      CommonErrorCodes = "requestParameter_wrongFormat"
	ResourceDataConflict             CommonErrorCodes = "resourceData_conflict"
	ResourceDataContradicting        CommonErrorCodes = "resourceData_contradicting"
	ResourceDataInvalid              CommonErrorCodes = "resourceData_invalid"
	ResourceDataMissing              CommonErrorCodes = "resourceData_missing"
	ResourceDataNotSupported         CommonErrorCodes = "resourceData_not_supported"
	ResourceDataPointless            CommonErrorCodes = "resourceData_pointless"
	ResourceDataWrongFormat          CommonErrorCodes = "resourceData_wrongFormat"
	ResourceVersionMismatch          CommonErrorCodes = "resourceVersion_mismatch"
	UrlInvalid                       CommonErrorCodes = "url_invalid"
)

// Defines values for ProblemBaseClassSeverity.
const (
	Error   ProblemBaseClassSeverity = "error"
	Warning ProblemBaseClassSeverity = "warning"
)

// Defines values for ProblemPlaceEnum.
const (
	Calculated         ProblemPlaceEnum = "calculated"
	Cookie             ProblemPlaceEnum = "cookie"
	Persistence        ProblemPlaceEnum = "persistence"
	QueryParam         ProblemPlaceEnum = "queryParam"
	RemoteService      ProblemPlaceEnum = "remoteService"
	RequestBody        ProblemPlaceEnum = "requestBody"
	RequestHeader      ProblemPlaceEnum = "requestHeader"
	ResponseBody       ProblemPlaceEnum = "responseBody"
	ResponseHeader     ProblemPlaceEnum = "responseHeader"
	ResponseStatusCode ProblemPlaceEnum = "responseStatusCode"
	Url                ProblemPlaceEnum = "url"
	UrlParam           ProblemPlaceEnum = "urlParam"
)

// BaseResponseClass defines model for BaseResponseClass.
type BaseResponseClass struct {
	// Problems List of errors/warnings
	Problems *[]ProblemBaseClass `json:"problems" yaml:"problems"`

	// ProcessingTookMillis Number of milliseconds the processing took on server side
	ProcessingTookMillis *int32 `json:"processingTookMillis" yaml:"processingTookMillis"`

	// RequestReceivedAt The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
	RequestReceivedAt int32 `json:"requestReceivedAt" yaml:"requestReceivedAt"`
}

// CommonErrorCodes defines model for CommonErrorCodes.
type CommonErrorCodes string

// ContainerQueryRangeResponseClass defines model for ContainerQueryRangeResponseClass.
type ContainerQueryRangeResponseClass struct {
	Container *ResponseContainerInfoClass `json:"container" yaml:"container"`

	// DataFromTimestamp This response contains data starting by this UNIX timestamp in UTC (seconds since Epoch) - will be always rounded to at least minutes or even more (see section "Interval of your interest" above!)
	DataFromTimestamp int32 `json:"dataFromTimestamp" yaml:"dataFromTimestamp"`

	// DataToTimestamp This response contains data until this UNIX timestamp in UTC (seconds since Epoch)
	DataToTimestamp int32 `json:"dataToTimestamp" yaml:"dataToTimestamp"`

	// Problems List of errors/warnings
	Problems *[]ProblemBaseClass `json:"problems" yaml:"problems"`

	// ProcessingTookMillis Number of milliseconds the processing took on server side
	ProcessingTookMillis *int32 `json:"processingTookMillis" yaml:"processingTookMillis"`

	// RequestReceivedAt The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
	RequestReceivedAt int32 `json:"requestReceivedAt" yaml:"requestReceivedAt"`

	// RequestedFromTimestamp In the request you requested data starting by this UNIX timestamp in UTC (seconds since Epoch)
	RequestedFromTimestamp int32 `json:"requestedFromTimestamp" yaml:"requestedFromTimestamp"`

	// RequestedToTimestamp In the request you requested data until this UNIX timestamp in UTC (seconds since Epoch)
	RequestedToTimestamp int32 `json:"requestedToTimestamp" yaml:"requestedToTimestamp"`
}

// ContainerResponseClass defines model for ContainerResponseClass.
type ContainerResponseClass struct {
	Container *ResponseContainerInfoClass `json:"container" yaml:"container"`

	// Problems List of errors/warnings
	Problems *[]ProblemBaseClass `json:"problems" yaml:"problems"`

	// ProcessingTookMillis Number of milliseconds the processing took on server side
	ProcessingTookMillis *int32 `json:"processingTookMillis" yaml:"processingTookMillis"`

	// RequestReceivedAt The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
	RequestReceivedAt int32 `json:"requestReceivedAt" yaml:"requestReceivedAt"`
}

// MessageResponseClass defines model for MessageResponseClass.
type MessageResponseClass struct {
	// Message The human readable message
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`

	// Problems List of errors/warnings
	Problems *[]ProblemBaseClass `json:"problems" yaml:"problems"`

	// ProcessingTookMillis Number of milliseconds the processing took on server side
	ProcessingTookMillis *int32 `json:"processingTookMillis" yaml:"processingTookMillis"`

	// RequestReceivedAt The server time in UNIX timestamp in UTC (seconds since Epoch) when this response was received and processing was started
	RequestReceivedAt int32 `json:"requestReceivedAt" yaml:"requestReceivedAt"`
}

// ProblemBaseClass defines model for ProblemBaseClass.
type ProblemBaseClass struct {
	ErrorCodes *[]CommonErrorCodes `json:"errorCodes" yaml:"errorCodes"`

	// Message The problem in human readable form
	Message string `json:"message" yaml:"message"`

	// Place This info piece is most useful for 400 - "Bad Request" problems but can be meaningful of course in other scenarios too. It marks the place which has the problem.
	Place *ProblemPlaceEnum `json:"place" yaml:"place"`

	// PlaceName If it makes sense it tells you which place was problematic. E.g. if a request parameter should be an Integer but you send in something wrong then "placeName" will tell you exactly which request parameter was wrong.
	PlaceName *string                  `json:"placeName" yaml:"placeName"`
	Severity  ProblemBaseClassSeverity `json:"severity" yaml:"severity"`
}

// ProblemBaseClassSeverity defines model for ProblemBaseClass.Severity.
type ProblemBaseClassSeverity string

// ProblemPlaceEnum This info piece is most useful for 400 - "Bad Request" problems but can be meaningful of course in other scenarios too. It marks the place which has the problem.
type ProblemPlaceEnum string

// ResponseContainerInfoClass defines model for ResponseContainerInfoClass.
type ResponseContainerInfoClass struct {
	// Id The ID of the container - this is typically a UUID like value
	Id string `json:"id" yaml:"id"`

	// Name The name of the container
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// ContainerId defines model for containerId.
type ContainerId = string

// FromTimestamp defines model for fromTimestamp.
type FromTimestamp = string

// ToTimestamp defines model for toTimestamp.
type ToTimestamp = string
