// Package kt_pubapi_reports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package kt_pubapi_reports

import (
	"encoding/json"

	externalRef0 "github.com/keytiles/keytiles-public-api/gopkg/model/common"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for ReportsEndpointLocalErrorCodes.
const (
	ContainerIdInvalid ReportsEndpointLocalErrorCodes = "containerId_invalid"
	ContainerIdMissing ReportsEndpointLocalErrorCodes = "containerId_missing"
)

// GetContainerReportsResponseClass defines model for GetContainerReportsResponseClass.
type GetContainerReportsResponseClass = externalRef0.MessageResponseClass

// ReportClass defines model for ReportClass.
type ReportClass struct {
	// Id The unique ID of this report setup - UUID style
	Id string `json:"id"`

	// Schedules We schedule the report. That's an important point. Here you can assign actually multiple schedules. If you do so they are interpreted with "OR" operator.
	Schedules []externalRef0.Schedule `json:"schedules"`
}

// ReportsEndpointErrorCodes NOTE! Error codes is an Enum. Unfortunately in OpenApi (so far) there is no possibility to provide description for Enum values. But we have detailed description of each error codes! Please check the OpenApi file in our Github repo - you find them as comments for each Enum values!
type ReportsEndpointErrorCodes struct {
	union json.RawMessage
}

// ReportsEndpointLocalErrorCodes defines model for ReportsEndpointLocalErrorCodes.
type ReportsEndpointLocalErrorCodes string

// ReportsEndpointProblemClass defines model for ReportsEndpointProblemClass.
type ReportsEndpointProblemClass = externalRef0.ProblemBaseClass

// AsReportsEndpointLocalErrorCodes returns the union data inside the ReportsEndpointErrorCodes as a ReportsEndpointLocalErrorCodes
func (t ReportsEndpointErrorCodes) AsReportsEndpointLocalErrorCodes() (ReportsEndpointLocalErrorCodes, error) {
	var body ReportsEndpointLocalErrorCodes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReportsEndpointLocalErrorCodes overwrites any union data inside the ReportsEndpointErrorCodes as the provided ReportsEndpointLocalErrorCodes
func (t *ReportsEndpointErrorCodes) FromReportsEndpointLocalErrorCodes(v ReportsEndpointLocalErrorCodes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReportsEndpointLocalErrorCodes performs a merge with any union data inside the ReportsEndpointErrorCodes, using the provided ReportsEndpointLocalErrorCodes
func (t *ReportsEndpointErrorCodes) MergeReportsEndpointLocalErrorCodes(v ReportsEndpointLocalErrorCodes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalRef0CommonErrorCodes returns the union data inside the ReportsEndpointErrorCodes as a externalRef0.CommonErrorCodes
func (t ReportsEndpointErrorCodes) AsExternalRef0CommonErrorCodes() (externalRef0.CommonErrorCodes, error) {
	var body externalRef0.CommonErrorCodes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalRef0CommonErrorCodes overwrites any union data inside the ReportsEndpointErrorCodes as the provided externalRef0.CommonErrorCodes
func (t *ReportsEndpointErrorCodes) FromExternalRef0CommonErrorCodes(v externalRef0.CommonErrorCodes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalRef0CommonErrorCodes performs a merge with any union data inside the ReportsEndpointErrorCodes, using the provided externalRef0.CommonErrorCodes
func (t *ReportsEndpointErrorCodes) MergeExternalRef0CommonErrorCodes(v externalRef0.CommonErrorCodes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReportsEndpointErrorCodes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReportsEndpointErrorCodes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
